[{"id":0,"title":"简介","content":"#\n\n私有化部署","routePath":"/deploy/","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"服务端","content":"#","routePath":"/deploy/server/summary","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"前端","content":"#","routePath":"/deploy/web/summary","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"仓库说明","content":"#\n\n\n底层渲染能力#\n\n包名                                               描述          备注\n@lowcode-set-up-platform/renderer-core           渲染引擎        --\n@lowcode-set-up-platform/open-react-render-sdk   React 渲染器   --\n\n\n沙箱#\n\n包名                                         描述           备注\n@lowcode-set-up-platform/webview-sandbox   Iframe 的沙箱   --\n\n\n工具集#\n\n包名                                描述       备注\n@lowcode-set-up-platform/shared   搭建侧工具集   --\n\n\n搭建时#\n\n包名                                                   描述            备注\n@lowcode-set-up-platform/adapter                     状态适配器         --\n@lowcode-set-up-platform/building-render             搭建画布模拟器       --\n@lowcode-set-up-platform/code-compiler               搭建时的在线代码编译器   --\n@lowcode-set-up-platform/editor                      编辑器SDK        --\n@lowcode-set-up-platform/logicflow-sdk               可视化编排器        --\n@lowcode-set-up-platform/lowcode-canvas-layout       无限画布          --\n@lowcode-set-up-platform/plugin-base-monaco-editor   代码编辑器         --\n@lowcode-set-up-platform/service                     网络请求          --\n@lowcode-set-up-platform/setter                      组件配置设置器       --\n\n\n运行时#\n\n包名                                           描述         备注\n@lowcode-set-up-platform/client-render       页面渲染器      --\n@lowcode-set-up-platform/logicflow-render    流程编排的执行器   --\n@lowcode-set-up-platform/render-app-helper   页面渲染的工具集   --\n@lowcode-set-up-platform/component-loader    物料加载器      --","routePath":"/guide/appendix/repository","lang":"","toc":[{"text":"底层渲染能力","id":"底层渲染能力","depth":2,"charIndex":3},{"text":"沙箱","id":"沙箱","depth":2,"charIndex":206},{"text":"工具集","id":"工具集","depth":2,"charIndex":331},{"text":"搭建时","id":"搭建时","depth":2,"charIndex":431},{"text":"运行时","id":"运行时","depth":2,"charIndex":1139}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"平台使用","content":"#\n\n\n访问地址#\n\n低代码引擎的 Demo 可以通过如下永久链接访问到：\n\nDEMO\n\n\n功能概览#\n\n\n数据管理#\n\n包括基础的物料、页面、构建产物的维护。\n\n物料维护#\n\n\n\n页面维护#\n\n\n\n\n搭建画布#\n\n搭建平台的核心部分，包括沙箱渲染、动态表单配置、页面发布等。\n\n\n\n设计器承载着低代码平台的核心功能，包括物料开发导入、编排、组件配置、画布渲染、页面打包发布等等。\n\n\n发布第一个页面#\n\n请移步 页面搭建","routePath":"/guide/demo","lang":"","toc":[{"text":"访问地址","id":"访问地址","depth":2,"charIndex":3},{"text":"功能概览","id":"功能概览","depth":2,"charIndex":45},{"text":"数据管理","id":"数据管理","depth":3,"charIndex":53},{"text":"物料维护","id":"物料维护","depth":4,"charIndex":81},{"text":"页面维护","id":"页面维护","depth":4,"charIndex":90},{"text":"搭建画布","id":"搭建画布","depth":3,"charIndex":100},{"text":"发布第一个页面","id":"发布第一个页面","depth":2,"charIndex":192}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"CLI自动化","content":"#\n\n\n概述#\n\n待补充","routePath":"/guide/framework/CLI自动化","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"画布设计","content":"#\n\n\n概述#\n\n画布的能力是低代码平台的核心能力之一，也是低代码平台区别于传统开发平台的重要特征之一， 它主要承载着搭建时各种组件的可视化编辑、渲染。\n\n核心的能力包括画布的无限滚动、刻度线标尺、辅助线等能力。\n\n\n设计原理#\n\n\n无限画布#\n\n\n\n\n刻度线、标尺#\n\n待补充","routePath":"/guide/framework/canvas","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3},{"text":"设计原理","id":"设计原理","depth":2,"charIndex":108},{"text":"无限画布","id":"无限画布","depth":3,"charIndex":116},{"text":"刻度线、标尺","id":"刻度线标尺","depth":3,"charIndex":126}],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"编辑器","content":"#\n\n\n概述#\n\n画布的能力是低代码平台的核心能力之一，也是低代码平台区别于传统开发平台的重要特征之一， 它主要承载着搭建时各种组件的可视化编辑、渲染。\n\n核心的能力包括画布的无限滚动、刻度线标尺、辅助线等能力。\n\n\n设计原理#\n\n\n数据流向#\n\n\n\n\n物料管理#\n\n\n物料加载#\n\n\nEditor Sdk#\n\n\nPreview Sdk#","routePath":"/guide/framework/editor","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3},{"text":"设计原理","id":"设计原理","depth":2,"charIndex":108},{"text":"数据流向","id":"数据流向","depth":3,"charIndex":116},{"text":"物料管理","id":"物料管理","depth":3,"charIndex":126},{"text":"物料加载","id":"物料加载","depth":3,"charIndex":134},{"text":"Editor Sdk","id":"editor-sdk","depth":3,"charIndex":142},{"text":"Preview Sdk","id":"preview-sdk","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"物料定义","content":"#\n\n\n概述#\n\n待补充","routePath":"/guide/framework/material","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"页面定义","content":"#\n\n\n概述#\n\n待补充","routePath":"/guide/framework/page","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":10,"title":"页面预览","content":"#\n\n\n概述#\n\n低代码的页面预览能力用于搭建结果的校验，是搭建画布实时预览的补充。\n\n核心的能力主要是模板渲染。\n\n\n设计原理#\n\n\n预览流程#\n\n\n\n\n模板渲染#","routePath":"/guide/framework/preview","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3},{"text":"设计原理","id":"设计原理","depth":2,"charIndex":59},{"text":"预览流程","id":"预览流程","depth":3,"charIndex":67},{"text":"模板渲染","id":"模板渲染","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"页面发布","content":"#\n\n\n概述#\n\n低代码的页面发布能力类似于传统前端开发中的发布，主要是生成符合前端规范的静态资源（js、css、html）\n\n核心的能力包括物料资源的合并、oss 上传等。\n\n\n设计原理#\n\n\n发布流程#\n\n\n\n\n物料合并#\n\n\nOSS#\n\n\n生产运行时#\n\n","routePath":"/guide/framework/publish","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3},{"text":"设计原理","id":"设计原理","depth":2,"charIndex":89},{"text":"发布流程","id":"发布流程","depth":3,"charIndex":97},{"text":"物料合并","id":"物料合并","depth":3,"charIndex":107},{"text":"OSS","id":"oss","depth":3,"charIndex":115},{"text":"生产运行时","id":"生产运行时","depth":3,"charIndex":122}],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"沙箱","content":"#\n\n\n概述#\n\n因编辑器输入代码的不可信任，所以需要一个沙箱环境来执行代码, 防止程序访问 / 影响主页面, 主要用于隔离搭建侧和画布预览侧的作用域。\n\nTIP\n\n在计算机安全中，沙箱（Sandbox）是一种用于隔离正在运行程序的安全机制，通常用于执行未经测试或不受信任的程序或代码，它会为待执行的程序创建一个独立的执行环境\n，内部程序的执行不会影响到外部程序的运行\n\n画布使用了最传统的 Iframe 方案，它的兼容性最好，功能最完善（沙箱做的最彻底，js 作用域、css 隔离等），但此处还是列举了几个社区中其他的沙箱方案。\n\n\n其他方案#\n\n\nProxy Sandbox#\n\n可以通过代理 Proxy 实现对象的劫持，通过 window 对象的修改进行记录，在卸载时删除这些记录，在应用再次激活时恢复这些记录，来达到模拟沙箱环境的目的。\n\n\n\n以上代码实现了基础版的沙箱，通过 active 方法开始沙箱代理，社区中的 qiankunu 等此类的微前端架构中基本都采用了此类的设计。\n\n\nDiff Sandbox#\n\n除 Proxy 方式外，我们可以通过 diff 的方式创建沙箱，一般作为 Proxy Sandbox 的降级方案，在应用运行的时候保存一个快照 window\n对象，将当前 window 对象的全部属性都复制到快照对象上，子应用卸载的时候将 window 对象修改做个 diff，将不同的属性用个 modifyMap\n保存起来，再次挂载的时候再加上这些修改的属性。\n\n\n\n\n画布沙箱#\n\n\n方案设计#\n\n画布沙箱和低代码平台处于同域，因此不会存在跨域无法操作沙箱 dom 的问题，仅仅作为隔离 javascript、style 的容器。\n\n","routePath":"/guide/framework/sandbox","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3},{"text":"其他方案","id":"其他方案","depth":2,"charIndex":267},{"text":"Proxy Sandbox","id":"proxy-sandbox","depth":3,"charIndex":275},{"text":"Diff Sandbox","id":"diff-sandbox","depth":3,"charIndex":447},{"text":"画布沙箱","id":"画布沙箱","depth":2,"charIndex":648},{"text":"方案设计","id":"方案设计","depth":3,"charIndex":656}],"domain":"","frontmatter":{},"version":""},{"id":13,"title":"架构概述","content":"#\n\n\n系统设计概述#\n\n\n\n平台以 Schema 协议为基础（包括物料、页面、应用）协议，在协议的基础之上、基于 React 实现了渲染引擎，旨在通过标准协议还原 UI 视图、交互；\n\n从开发者的角度，平台提供了快捷的的物料、插件的生产方式，以满足对于物料的自定义要求。\n\n\n协议栈概述#\n\n\n物料协议#\n\n物料的协议包含俩部分：物料设置器协议、物料的基本信息协议：\n\n 1. 物料的设置器协议主要用于描述物料的哪些属性、交互、事件是允许物料的消费者配置的，以及该如何配置这些配置项，这部分的定义可以 移步、查看更多\n 2. 物料的基本信息协议主要用于描述物料的基本信息。\n\n这部分的协议主要由物料的生产者提供，以下是一个简单的物料协议示例：\n\n物料的设置器协议示例：\n\n\n\n物料的数据协议示例：\n\n\n\n\n页面协议#\n\n页面的协议主要用于描述页面的结构、样式、生命周期、状态、方法等，以下是一个简单的页面协议示例：\n\n\n\n\n引擎流程概述#\n\n\n\n\n周边生态概述#\n\n平台生态主要分为 3 部分，物料、设置器和插件。\n\n\n物料生态#\n\n物料是低代码平台的生产资料，包括：\n\n 1. 低代码物料生产能力和规范（协议、自定义物料能力）；\n 2. 物料的规范化的开发流程（创建、开发、发布、注册、升级、下线）等；\n 3. AntdDesign 组件的支持（进行中）。\n\n\n设置器生态#\n\n设置器主要负责物料配置项的统筹管理，物料的生产者在开发物料时，如果平台提供的默认的设置器无法满足时，就需要自定义开发物料的设置器，目前平台提供的默认设置器，字符\n、数字、布尔、数组、对象数组等。\n\n每个设置器本质上是一个 React 组件，接受由引擎传入的参数 value 和 onChange，value 是初始传入的值，onChange\n是在设置器的值变化时的回传函数，将值刨除去（类似于Form Item 中的自定义组件）。\n\n\n插件生态#\n\n目前平台提供的插件有：源码编辑面板、大纲树面板、设置器容器面板、顶部通栏面板、Schema 预览面板等，后续会陆续开发其自定义的能力。","routePath":"/guide/framework/summary","lang":"","toc":[{"text":"系统设计概述","id":"系统设计概述","depth":2,"charIndex":3},{"text":"协议栈概述","id":"协议栈概述","depth":2,"charIndex":138},{"text":"物料协议","id":"物料协议","depth":3,"charIndex":147},{"text":"页面协议","id":"页面协议","depth":3,"charIndex":353},{"text":"引擎流程概述","id":"引擎流程概述","depth":2,"charIndex":412},{"text":"周边生态概述","id":"周边生态概述","depth":2,"charIndex":424},{"text":"物料生态","id":"物料生态","depth":3,"charIndex":460},{"text":"设置器生态","id":"设置器生态","depth":3,"charIndex":582},{"text":"插件生态","id":"插件生态","depth":3,"charIndex":808}],"domain":"","frontmatter":{},"version":""},{"id":14,"title":"物料DSL解析","content":"#\n\n\n概述#\n\n当前业内大多数低代码平台的物料配置项通常通过 JSON Schema 来描述。这种方式虽然灵活，但在实际开发中存在一些明显的痛点：\n\n 1. 学习成本高：特别是对于拥有复杂配置项的物料，理解和手写 Schema 需要较高的专业知识，给开发者带来了额外的负担。\n 2. 重复工作量大：对于使用 TypeScript 的开发者来说，手写 JSON Schema\n    的过程尤为繁琐。开发者通常需要为同一个属性定义两套配置：一套是用于代码类型校验的 Interface.ts 文件，另一套是描述 Schema 的\n    JSON 文件，这大幅增加了开发成本。\n\n通过自动化生成配置项，可以有效降低开发难度，提高开发效率，同时减少维护成本。\n\n\n基本流程#\n\n\n\n移步体验{:target=\"_blank\"}\n\n\n设计原理#\n\n开发者可以使用 TypeScript 编写物料的 props 类型文件 (Interface.ts)，然后通过工具将其解析成 AST，再根据 AST\n中的字段和注释自动生成标准的 DSL；\n\n例如以下代码:\n\n\n\n通过解析后生成如下的 DSL:\n\nDETAILS\n\n\n\n最后通过 DSL json 渲染的效果类似：\n\n\n\n\nAST 解析#\n\n常见的方案#\n\n业内解析代码生成Ast 的工具非常多。\n\nBabel#\n\n广泛用于 ES6+ 转换为 ES5，代码转译、优化和静态分析， 适合处理 JavaScript/TypeScript 代码的语法转换与优化。\n\n 1. @babel/parser：解析代码生成 AST；\n 2. @babel/traverse：对 AST 进行遍历，修改节点；\n 3. @babel/types：用于生成或修改 AST 节点；\n 4. @babel/generator：将 AST 转回代码；\n\nAcorn#\n\n轻量级、高性能的 JavaScript 解析器， 需要自定义的语法扩展或极高的性能需求。\n\nSWC#\n\n基于 Rust 的高性能 JavaScript/TypeScript 转译器，支持解析和生成 AST， 性能远超\nBabel，适合需要高性能的大规模代码解析与转换。\n\nTypeScript Compiler API#\n\n能解析 TypeScript 代码为 AST， 适合对 TypeScript 代码的深度解析和类型分析。\n\n最佳选择#\n\n此转换工具只用通过分析 AST 查找字段类型，不用修改源码，比较适合通过 TypeScript Compiler 实现。 TypeScript Compiler\nAPI 官方提供的文档只有一个 wiki，TypeScript Compiler API， 感兴趣的可以研究研究。\n\n 1. createSourceFile\n\n\n\n 2. forEachChild\n\n\n\n 3. SyntaxKind.InterfaceDeclaration\n\n对于 interface 关键字段做分析处理。\n\n 4. SyntaxKind.EnumDeclaration\n\n对于 enum 关键字段做分析处理。\n\n 4. SyntaxKind.TypeAliasDeclaration、SyntaxKind.FunctionType\n\n对于函数类型做分析处理。\n\n\n元数据解析#\n\n元数据解析主要负责解析物料的基本信息，包括物料名称、物料描述、物料版本、物料的每一个配置项等。\n\n 1. 通过 ts 提供的 getJSDocTags Api 获取字段对应的注释；\n 2. 然后逐一解析每一行注释，提取出字段的名称、已经对应的值；\n\n核心实现#\n\n","routePath":"/guide/framework/type-to-ast","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3},{"text":"基本流程","id":"基本流程","depth":2,"charIndex":330},{"text":"设计原理","id":"设计原理","depth":2,"charIndex":364},{"text":"AST 解析","id":"ast-解析","depth":3,"charIndex":533},{"text":"常见的方案","id":"常见的方案","depth":4,"charIndex":542},{"text":"最佳选择","id":"最佳选择","depth":4,"charIndex":1009},{"text":"元数据解析","id":"元数据解析","depth":3,"charIndex":1390},{"text":"核心实现","id":"核心实现","depth":4,"charIndex":1523}],"domain":"","frontmatter":{},"version":""},{"id":15,"title":"简介","content":"#\n\n\n低代码介绍#\n\n零代码、低代码的概念在整个全球行业内已经流行了很长一段时间。通常意义上的低代码定义会有三个关键点：\n\n\n\n通常情况下低代码平台会具备以下的几个能力：\n\n\n\n\n低代码引擎介绍#\n\n低代码引擎是一款为前端开发、业务交付者提供的平台。\n\n下面简单描述定义中的子部分：\n\n现如今低代码平台越来越多，而每一个低代码平台中都会有的一个能力就是搭建和配置页面、模块的页面，这个页面我们称为设计器。例如，下图是中后台低代码平台的设计器。\n\n\n\n设计器承载着低代码平台的核心功能，包括物料开发导入、编排、组件配置、画布渲染、页面打包发布等等。\n\n\n社区解决方案#\n\n特性/产品   LOWCODEENGINE   TANGO              TMAGIC-EDITOR\n技术支持    阿里              网易                 腾讯\n产品特点    基于 Schema 搭建    基于 code + AST 搭建   基于 Schema + Sandbox 搭建\n官方网站    官网              官网                 官网\n\n笔者只是列举了几个比较典型的，有大厂背书的平台，大致分为两类，第一类就是以类似 LowCodeEngine 的以 schema\n为基础的搭建平台，用户的所有的搭建操作都是编辑 schema, 然后渲染器通过 schema 渲染页面；第二类就是类似 tango 的基于源码 AST\n驱动，无私有 DSL 和协议，用户的所有的搭建操作转为对 AST 的遍历和修改，进而将 AST 重新生成为代码，将代码同步给在线沙箱执行。","routePath":"/guide/","lang":"","toc":[{"text":"低代码介绍","id":"低代码介绍","depth":2,"charIndex":3},{"text":"低代码引擎介绍","id":"低代码引擎介绍","depth":2,"charIndex":90},{"text":"社区解决方案","id":"社区解决方案","depth":2,"charIndex":276}],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"","content":"","routePath":"/guide/openapi/component/ExampleCode","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"","content":"","routePath":"/guide/openapi/component/ExampleRenderView","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":18,"title":"","content":"","routePath":"/guide/openapi/component/Use","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"开放接口","content":"#\n\n\n概述#\n\n待补充","routePath":"/guide/openapi/openapi","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"渲染器接入—前端","content":"#\n\n\n概述#\n\n平台提供了 SDK 版的渲染器，用于 SCHEMA 到视图的渲染；\n\n\n使用#\n\n\n安裝#\n\n\n效果#\n\n通过规范的 Schema 渲染组件或者页面:\n\nDETAILS\n\n","routePath":"/guide/openapi/sdk-front","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3},{"text":"使用","id":"使用","depth":2,"charIndex":44},{"text":"安裝","id":"安裝","depth":3,"charIndex":50},{"text":"效果","id":"效果","depth":3,"charIndex":56}],"domain":"","frontmatter":{},"version":""},{"id":21,"title":"密钥管理","content":"#\n\n\n申请密钥#\n\n进入秘钥管理 点击新增。\n\n\n\n\n注意#\n\nTIP\n\n一个账号最多拥有两对密钥(Access/Secret\nKey)；更换密钥时，请创建第二个密钥；删除密钥前须停用；出于安全考虑，建议您周期性地更换密钥也不可泄露他人或者公开。","routePath":"/guide/operation/access","lang":"","toc":[{"text":"申请密钥","id":"申请密钥","depth":2,"charIndex":3},{"text":"注意","id":"注意","depth":2,"charIndex":27}],"domain":"","frontmatter":{},"version":""},{"id":22,"title":"页面搭建","content":"#\n\n\n页面创建#\n\n 1. 登入平台进入 物料管理\\页面管理\n\n 2. 点击新增页面，填入基本信息，点击确认，返回页面列表\n    \n    \n\n 3. 找到刚新建的页面，点击版本 进入该页面的版本列表\n    \n    \n\n 4. 点击装修，即可进入搭建页面\n\n\n页面搭建#\n\n 1. 选择左侧物料\n    \n    \n\n 2. 选中画布组件，配置右侧组件对应的属性\n    \n    \n\n\n预览页面#\n\n 1. 点击右上角预览，会先自动触发页面保存，紧接着会自动打开新 tab, 即可看到搭建的效果\n\n\n发布页面#\n\n 1. 点击右上角发布按钮，会先自动触发页面保存，紧接着会触发服务端打包进行产物的构建\n    \n    \n\n 2. 返回页面列表，即可看到页面状态已变更为已发布，点击页面路径即可访问刚刚搭建的页面\n    \n    \n\n\n产物下载#\n\n 1. 页面对应的版本列表，点击发布记录，即可进行产物下载，然后在我的下载中可以找到对应的下载任务","routePath":"/guide/operation/build-page","lang":"","toc":[{"text":"页面创建","id":"页面创建","depth":2,"charIndex":3},{"text":"页面搭建","id":"页面搭建-1","depth":2,"charIndex":-1},{"text":"预览页面","id":"预览页面","depth":2,"charIndex":197},{"text":"发布页面","id":"发布页面","depth":2,"charIndex":254},{"text":"产物下载","id":"产物下载","depth":2,"charIndex":373}],"domain":"","frontmatter":{},"version":""},{"id":23,"title":"平台登录","content":"#\n\n\n登录#\n\n进入登录页面。\n\n\n\n\n注意#\n\nTIP\n\n个人账号注意保密，切记不可泄露他人。","routePath":"/guide/operation/login","lang":"","toc":[{"text":"登录","id":"登录","depth":2,"charIndex":3},{"text":"注意","id":"注意","depth":2,"charIndex":20}],"domain":"","frontmatter":{},"version":""},{"id":24,"title":"平台注册","content":"#\n\n\n注册#\n\n进入登录页面。\n\n\n\n\n注意#\n\nTIP\n\n个人账号注意保密，切记不可泄露他人。","routePath":"/guide/operation/register","lang":"","toc":[{"text":"注册","id":"注册","depth":2,"charIndex":3},{"text":"注意","id":"注意","depth":2,"charIndex":20}],"domain":"","frontmatter":{},"version":""},{"id":25,"title":"Schema定义","content":"#\n\nSchema 用于描述物料的属性，平台支持用 TypeScript 的 interface 直接定义，更加符合开发者的编码习惯。物料在编译阶段会自动将\ninterface 文件通过 Ast 转成成Schema，其中成员属性会解析成配置属性，成员属性的注释会解析成对应的 Props。以下列举了一些常见的示例。\n\n\n常见配置#\n\n\nStringSetter#\n\n效果#\n\n示例配置#\n\n\nImageSetter#\n\n效果#\n\n示例配置#\n\n\nNumberSetter#\n\n效果#\n\n示例配置#\n\n\nEventSetter#\n\n效果#\n\n示例配置#\n\n\nColorSetter#\n\n效果#\n\n示例配置#\n\n\nDateSetter#\n\n效果#\n\n示例配置#\n\n\nTimeSetter#\n\n效果#\n\n示例配置#\n\n\nDateTimeSetter#\n\n效果#\n\n示例配置#\n\n\nSingleSelectSetter#\n\n效果#\n\n示例配置#\n\n\nMultipleSelectSetter#\n\n效果#\n\n示例配置#\n\n\nBooleanSetter#\n\n效果#\n\n示例配置#\n\n\nCheckBoxSetter#\n\n效果#\n\n示例配置#\n\n\nObjectSetter#\n\n效果#\n\n示例配置#\n\n\nArrayObjectSetter#\n\n效果#\n\n示例配置#\n\n\n配置选项#\n\n\n常用注解选项#\n\ntype#\n\n * 描述：表单字段的类型\n * 类型：string | number | boolean | array | range | html | block\n\ntitle#\n\n * 描述：表单字段的标签\n * 类型：string\n\nplaceholder#\n\n * 描述：输入内容提示\n * 类型：string | [string, string]\n\ndescription#\n\n * 描述：副标题描述\n * 类型：string\n\nmin#\n\n * 描述：NumberSetter 类型时为最小值；\n * 类型：number\n\nmax#\n\n * 描述：NumberSetter 类型时为最大值；\n * 类型：number\n\nmin#\n\n * 描述：NumberSetter 类型时为最小值；\n * 类型：number\n\nmaxItems#\n\n * 描述：ArrayObjectSetter、ArraySetter 类型时最大的长度；\n * 类型：number\n\nminItems#\n\n * 描述：ArrayObjectSetter、ArraySetter 类型时最小的长度；\n * 类型：number\n\nformat#\n\n * 描述：在已设置的 type 下，如何处理这个 type\n * 类型：'image' | 'text' | 'dateTime' | 'date' | 'time' | 'file' | 'color'\n\nTIP\n\n会根据 type 和 format 自动选择适合的 widget。但更推荐显式的指定 widget，而不是自动选择。\n\n\n其他注解选项#\n\ntooltip#\n\n * 描述：气泡提示\n * 类型：string\n\ndescWidget#\n\n * 描述：自定义副标题提示组件\n * 类型：string\n\nrequired#\n\n * 描述：是否必填\n * 类型：boolean\n\nprops#\n\n * 描述：其他属性，object 属性转换成 string\n\n * 类型：string","routePath":"/guide/use/Schema定义","lang":"","toc":[{"text":"常见配置","id":"常见配置","depth":2,"charIndex":159},{"text":"StringSetter","id":"stringsetter","depth":3,"charIndex":167},{"text":"效果","id":"效果","depth":4,"charIndex":182},{"text":"示例配置","id":"示例配置","depth":4,"charIndex":187},{"text":"ImageSetter","id":"imagesetter","depth":3,"charIndex":195},{"text":"效果","id":"效果-1","depth":4,"charIndex":209},{"text":"示例配置","id":"示例配置-1","depth":4,"charIndex":214},{"text":"NumberSetter","id":"numbersetter","depth":3,"charIndex":222},{"text":"效果","id":"效果-2","depth":4,"charIndex":237},{"text":"示例配置","id":"示例配置-2","depth":4,"charIndex":242},{"text":"EventSetter","id":"eventsetter","depth":3,"charIndex":250},{"text":"效果","id":"效果-3","depth":4,"charIndex":264},{"text":"示例配置","id":"示例配置-3","depth":4,"charIndex":269},{"text":"ColorSetter","id":"colorsetter","depth":3,"charIndex":277},{"text":"效果","id":"效果-4","depth":4,"charIndex":291},{"text":"示例配置","id":"示例配置-4","depth":4,"charIndex":296},{"text":"DateSetter","id":"datesetter","depth":3,"charIndex":304},{"text":"效果","id":"效果-5","depth":4,"charIndex":317},{"text":"示例配置","id":"示例配置-5","depth":4,"charIndex":322},{"text":"TimeSetter","id":"timesetter","depth":3,"charIndex":330},{"text":"效果","id":"效果-6","depth":4,"charIndex":343},{"text":"示例配置","id":"示例配置-6","depth":4,"charIndex":348},{"text":"DateTimeSetter","id":"datetimesetter","depth":3,"charIndex":356},{"text":"效果","id":"效果-7","depth":4,"charIndex":373},{"text":"示例配置","id":"示例配置-7","depth":4,"charIndex":378},{"text":"SingleSelectSetter","id":"singleselectsetter","depth":3,"charIndex":386},{"text":"效果","id":"效果-8","depth":4,"charIndex":407},{"text":"示例配置","id":"示例配置-8","depth":4,"charIndex":412},{"text":"MultipleSelectSetter","id":"multipleselectsetter","depth":3,"charIndex":420},{"text":"效果","id":"效果-9","depth":4,"charIndex":443},{"text":"示例配置","id":"示例配置-9","depth":4,"charIndex":448},{"text":"BooleanSetter","id":"booleansetter","depth":3,"charIndex":456},{"text":"效果","id":"效果-10","depth":4,"charIndex":472},{"text":"示例配置","id":"示例配置-10","depth":4,"charIndex":477},{"text":"CheckBoxSetter","id":"checkboxsetter","depth":3,"charIndex":485},{"text":"效果","id":"效果-11","depth":4,"charIndex":502},{"text":"示例配置","id":"示例配置-11","depth":4,"charIndex":507},{"text":"ObjectSetter","id":"objectsetter","depth":3,"charIndex":515},{"text":"效果","id":"效果-12","depth":4,"charIndex":530},{"text":"示例配置","id":"示例配置-12","depth":4,"charIndex":535},{"text":"ArrayObjectSetter","id":"arrayobjectsetter","depth":3,"charIndex":543},{"text":"效果","id":"效果-13","depth":4,"charIndex":563},{"text":"示例配置","id":"示例配置-13","depth":4,"charIndex":568},{"text":"配置选项","id":"配置选项","depth":2,"charIndex":576},{"text":"常用注解选项","id":"常用注解选项","depth":3,"charIndex":584},{"text":"type","id":"type","depth":4,"charIndex":593},{"text":"title","id":"title","depth":4,"charIndex":678},{"text":"placeholder","id":"placeholder","depth":4,"charIndex":714},{"text":"description","id":"description","depth":4,"charIndex":774},{"text":"min","id":"min","depth":4,"charIndex":814},{"text":"max","id":"max","depth":4,"charIndex":862},{"text":"min","id":"min-1","depth":4,"charIndex":910},{"text":"maxItems","id":"maxitems","depth":4,"charIndex":958},{"text":"minItems","id":"minitems","depth":4,"charIndex":1029},{"text":"format","id":"format","depth":4,"charIndex":1100},{"text":"其他注解选项","id":"其他注解选项","depth":3,"charIndex":1280},{"text":"tooltip","id":"tooltip","depth":4,"charIndex":1289},{"text":"descWidget","id":"descwidget","depth":4,"charIndex":1324},{"text":"required","id":"required","depth":4,"charIndex":1368},{"text":"props","id":"props","depth":4,"charIndex":1405}],"domain":"","frontmatter":{},"version":""},{"id":26,"title":"","content":"","routePath":"/guide/use/code/Code","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":27,"title":"自定义物料","content":"#\n\n\n创建第一个物料#\n\n 1. 安装脚手架 @wu-component/wu-cli 是于搭建平台配套使用的教授架，用于物料的创建、开发、发布（该脚手架不仅可以开发物料，也可以开发\n    WebComponent 以及传统的 Web 项目）。\n    \n    \n\n 2. 创建项目\n    \n    \n    \n    application-app-name 为要创建的物料名称。\n    \n    生成的目录结构如下：\n    \n    \n\n 3. 开发服务器 启动开发服务器就可以愉快的开发了， 命令如下（dev 脚本会执行 wu dev，底层依赖 vite 的 dev-server）：\n    \n    \n\n\n物料发布#\n\n\n物料构建#\n\n执行构建命令 build， 命令如下（build 脚本会执行 wu build，底层依赖 vite 的构建）：\n\n\n\n构建的产物如下(和wu-config.ts 中的 format 关联)：\n\n\n\n\n物料发布#\n\n执行发布命令前，需要校验以下三项：\n\n 1. 确保该物料在平台侧已经创建，进入组件管理，根据组件名称（wu-config-ts 中 meta.lib.name属性\n    ）查询，如果组件不存在，则创建新组件。\n    \n    \n    \n    其中表单的 组件名称、组件包名 都需要和 wu-config.ts 中一致， 对应 meta.lib.name、meta.lib.libName。\n    \n    \n\n 2. 确保 package.json 中的 version 和已有版本不会冲突。\n\n一切准备就绪后执行 发布命令：\n\n\n\nTIP\n\n首次执行 wu upload 时会执行登录授权的逻辑，控制台会提示自动打开浏览器进行登录授权（如无法自动打开浏览器，则可以手动复制 url 打开）。\n\n\n升级线上版本#\n\n组件提示发布成功后，进入组件管理，可以通过 版本日志查看组件详情，也可以酌情升级/发布组件。\n\n\n\n\n文件说明#\n\n\nwu.config.ts#\n\n配置示例#\n\nwu.config.ts 基本配置如下：\n\n\n\n配置项#\n\n名称     类型     必填   默认值   说明\nmeta   Meta   是    --    物料的元数据配置\n\nMeta#\n\n名称     类型                 必填   默认值        说明\ntype   ProjectType        是    material   项目的类型，此时默认为 material，此值还可以是 web、web-component\nlib    ProjectLibConfig   是    --         物料构建、开发时的配置，创建项目时自动生成，可以自己修改\nuser   CliUser            否    --         发布物料时的用户信息配置，1：需要在平台注册成为用户，2：首次发布物料需要登录授权\n\nProjectLibConfig#\n\n名称         类型                  必填   默认值                                        说明\nlibName    String              是    自动生成                                       物料 umd 构建产物的变量名称，同 vite\\webpack 的 library.name 配置\nname       String              是    自动生成                                       物料名称，平台内必须保持唯一性\nformats    String[]            是    ['umd', 'es', 'cjs', 'iife']               物料构建产物的类型，类似 vite\\webpack 的format 配置\nfileName   (format) =>String   是    format => ${format}.js                     物料构建产物的fileName，类似 vite\\webpack fileName 配置\nexternal   Object              否    {react: 'React','react-dom': 'ReactDOM'}   物料构建 external，类似 vite\\webpack external 配置\n\nCliUser#\n\n名称     类型       必填   默认值                              说明\nhost   String   是    https://static-cdn.ry-ltd.site   平台域名，私有化部署时填写私有化部署的域名\n\n\nIProps.d.ts#\n\n该文件是物料的类型定义文件,物料的 Schema 通过该文件中定义的 TypeScript 类型结合注释来生成，该文件会自动创建，开发者可根据需求自定义组件\nSchema。\n\n 1. 物料类型定义\n 2. TS类型转Schema设计原理","routePath":"/guide/use/material","lang":"","toc":[{"text":"创建第一个物料","id":"创建第一个物料","depth":2,"charIndex":3},{"text":"物料发布","id":"物料发布","depth":2,"charIndex":313},{"text":"物料构建","id":"物料构建","depth":3,"charIndex":321},{"text":"物料发布","id":"物料发布-1","depth":3,"charIndex":428},{"text":"升级线上版本","id":"升级线上版本","depth":3,"charIndex":789},{"text":"文件说明","id":"文件说明","depth":2,"charIndex":849},{"text":"wu.config.ts","id":"wuconfigts","depth":3,"charIndex":857},{"text":"配置示例","id":"配置示例","depth":4,"charIndex":872},{"text":"配置项","id":"配置项","depth":4,"charIndex":903},{"text":"IProps.d.ts","id":"ipropsdts","depth":3,"charIndex":2099}],"domain":"","frontmatter":{},"version":""},{"id":28,"title":"","content":"","routePath":"/guide/use/schemaComponent/Boolean","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":29,"title":"","content":"","routePath":"/guide/use/schemaComponent/ColorPicker","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":30,"title":"","content":"","routePath":"/guide/use/schemaComponent/DatePicker","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":31,"title":"","content":"","routePath":"/guide/use/schemaComponent/Event","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":32,"title":"","content":"","routePath":"/guide/use/schemaComponent/FormSchemaRender","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":33,"title":"","content":"","routePath":"/guide/use/schemaComponent/Image","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":34,"title":"","content":"","routePath":"/guide/use/schemaComponent/Input","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":35,"title":"","content":"","routePath":"/guide/use/schemaComponent/InputNumber","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":36,"title":"","content":"","routePath":"/guide/use/schemaComponent/Object","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":37,"title":"","content":"","routePath":"/guide/use/schemaComponent/ObjectArray","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":38,"title":"","content":"","routePath":"/guide/use/schemaComponent/Select","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":39,"title":"Hello World!","content":"#\n\n\nStart#\n\nWrite something to build your own docs! 🎁","routePath":"/hello","lang":"","toc":[{"text":"Start","id":"start","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":41,"title":"","content":"","routePath":"/schema/","lang":"","toc":[],"domain":"","frontmatter":{"navbar":true,"sidebar":false,"outline":false,"footer":false},"version":""},{"id":42,"title":"","content":"","routePath":"/schema/playground/","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":43,"title":"","content":"","routePath":"/utils/LoadService","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":44,"title":"","content":"","routePath":"/utils/loader","lang":"","toc":[],"domain":"","frontmatter":{},"version":""}]