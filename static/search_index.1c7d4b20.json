[{"id":0,"title":"","content":"","routePath":"/deploy/experience/component/Build","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"","content":"","routePath":"/deploy/experience/component/Install","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"","content":"","routePath":"/deploy/experience/component/Run","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"本地部署","content":"#\n\n如果只是想本地体验，可根据以下步骤在本地体验。\n\n\n数据库#\n\n按前数据库篇步骤，准备好数据库配置\n\n\n项目准备#\n\n 1. 下载克隆代码，执行 install\n\n\n环境变量#\n\n编辑工程根目录下的 .env\n\n\n\n\n服务启动#\n\n 1. 执行 dev\n\n当控制台出现以下提示，表示服务已经启动成功\n\n\n\n 2. 管理端默认运行在 http://127.0.0.1:8080/lowcode-center-web","routePath":"/deploy/experience/summary","lang":"","toc":[{"text":"数据库","id":"数据库","depth":2,"charIndex":28},{"text":"项目准备","id":"项目准备","depth":2,"charIndex":54},{"text":"环境变量","id":"环境变量","depth":2,"charIndex":85},{"text":"服务启动","id":"服务启动","depth":2,"charIndex":111}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"简介","content":"#\n\n独立部署\n\n\n服务能力#\n\n","routePath":"/deploy/","lang":"","toc":[{"text":"服务能力","id":"服务能力","depth":2,"charIndex":9}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"","content":"","routePath":"/deploy/integration/component/Build","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"","content":"","routePath":"/deploy/integration/component/Install","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"","content":"","routePath":"/deploy/integration/component/Run","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"一体化部署","content":"#\n\n如果不想单独部署三个服务（引擎后端、管理端、编辑器），这里也提供一体化的部署。\n\n\n容器化部署#\n\n\n镜像构建#\n\n 1. 下载克隆代码，执行 bin 目录下的 build.sh 脚本\n\n 2. 构建镜像\n\n\n\n\n服务启动#\n\n 1. docker 启动服务（将对应的环境变量修改为真实的值）,容器启动后运行在 10009 端口\n\n\n\n\nK8S 集群#\n\n\n镜像构建#\n\n 1. 如上步骤构建镜像后推送到自己的镜像仓库\n\n\n集群部署#\n\n 1. 系定义修改 ymal 配置，尤其是 containers.env 必须配置正确\n\n","routePath":"/deploy/integration/summary","lang":"","toc":[{"text":"容器化部署","id":"容器化部署","depth":2,"charIndex":44},{"text":"镜像构建","id":"镜像构建","depth":3,"charIndex":53},{"text":"服务启动","id":"服务启动","depth":3,"charIndex":109},{"text":"K8S 集群","id":"k8s-集群","depth":2,"charIndex":171},{"text":"镜像构建","id":"镜像构建-1","depth":3,"charIndex":181},{"text":"集群部署","id":"集群部署","depth":3,"charIndex":214}],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"","content":"","routePath":"/deploy/server/component/Build","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":10,"title":"","content":"","routePath":"/deploy/server/component/Install","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"","content":"","routePath":"/deploy/server/component/Run","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"数据库","content":"#\n\n\n建库#\n\n创建数据库 b_lowcode_center_database （名称当然可以自己修改，但建议使用这个）。\n\n\n建表#\n\n\n\n\n默认数据#\n\n这个步骤很重要，字典数据涉及服务运行时的一些基本配置。\n\n","routePath":"/deploy/server/database","lang":"","toc":[{"text":"建库","id":"建库","depth":2,"charIndex":3},{"text":"建表","id":"建表","depth":2,"charIndex":64},{"text":"默认数据","id":"默认数据","depth":2,"charIndex":72}],"domain":"","frontmatter":{},"version":""},{"id":13,"title":"服务部署","content":"#\n\n\n容器化部署#\n\n\n镜像构建#\n\n 1. 下载克隆代码，执行 install\n\n 2. 服务构建，执行 build:min\n\n 3. 构建镜像\n\n\n\n\n服务启动#\n\n 1. docker 启动服务（将对应的环境变量修改为真实的值）,容器启动后运行在 10009 端口\n\n\n\n\npm2#\n\n\n服务构建#\n\n 1. 下载克隆代码，执行 install\n\n 2. 服务构建，执行 build:min\n\n\n环境准备#\n\n 1. 使用以下命令全局安装 PM2：\n\n 2. 在项目根目录下创建一个 ecosystem.config.js 文件，并将以下内容添加到文件中\n\n\n\n\n服务启动#\n\n 1. 执行以下命令，使用 PM2 启动应用程序\n\n\n\n 2. 使用以下命令来查看应用程序的运行状态\n\n\n\n\nK8S 集群#\n\n\n镜像构建#\n\n 1. 如上步骤构建镜像后推送到自己的镜像仓库\n\n\n集群部署#\n\n 1. 系定义修改 ymal 配置，尤其是 containers.env 必须配置正确\n\n","routePath":"/deploy/server/summary","lang":"","toc":[{"text":"容器化部署","id":"容器化部署","depth":2,"charIndex":3},{"text":"镜像构建","id":"镜像构建","depth":3,"charIndex":12},{"text":"服务启动","id":"服务启动","depth":3,"charIndex":78},{"text":"pm2","id":"pm2","depth":2,"charIndex":140},{"text":"服务构建","id":"服务构建","depth":3,"charIndex":147},{"text":"环境准备","id":"环境准备","depth":3,"charIndex":201},{"text":"服务启动","id":"服务启动-1","depth":3,"charIndex":285},{"text":"K8S 集群","id":"k8s-集群","depth":2,"charIndex":347},{"text":"镜像构建","id":"镜像构建-1","depth":3,"charIndex":357},{"text":"集群部署","id":"集群部署","depth":3,"charIndex":390}],"domain":"","frontmatter":{},"version":""},{"id":14,"title":"","content":"","routePath":"/deploy/web/component/Build","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":15,"title":"","content":"","routePath":"/deploy/web/component/Install","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"","content":"","routePath":"/deploy/web/component/Run","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"编辑器部署","content":"#\n\n\n容器化部署#\n\n\n镜像构建#\n\n 1. 下载克隆代码，执行 install\n\n 2. 服务构建，执行 run build:building-render\n\n 3. 服务构建，执行 run build\n\n 4. 构建镜像\n\n\n\n\n服务启动#\n\n 1. docker 启动服务（将对应的环境变量修改为真实的值）,容器启动后运行在 10009 端口\n\n\n\n\nK8S 集群#\n\n\n镜像构建#\n\n 1. 如上步骤构建镜像后推送到自己的镜像仓库\n\n\n集群部署#\n\n 1. 系定义修改 ymal 配置，尤其是 containers.env 必须配置正确\n\n","routePath":"/deploy/web/editor","lang":"","toc":[{"text":"容器化部署","id":"容器化部署","depth":2,"charIndex":3},{"text":"镜像构建","id":"镜像构建","depth":3,"charIndex":12},{"text":"服务启动","id":"服务启动","depth":3,"charIndex":117},{"text":"K8S 集群","id":"k8s-集群","depth":2,"charIndex":179},{"text":"镜像构建","id":"镜像构建-1","depth":3,"charIndex":189},{"text":"集群部署","id":"集群部署","depth":3,"charIndex":222}],"domain":"","frontmatter":{},"version":""},{"id":18,"title":"管理端部署","content":"#\n\n\n容器化部署#\n\n\n镜像构建#\n\n 1. 下载克隆代码，执行 install\n\n 2. 服务构建，执行 build\n\n 3. 构建镜像\n\n\n\n\n服务启动#\n\n 1. docker 启动服务（将对应的环境变量修改为真实的值）,容器启动后运行在 10009 端口\n\n\n\n\nK8S 集群#\n\n\n镜像构建#\n\n 1. 如上步骤构建镜像后推送到自己的镜像仓库\n\n\n集群部署#\n\n 1. 系定义修改 ymal 配置，尤其是 containers.env 必须配置正确\n\n","routePath":"/deploy/web/summary","lang":"","toc":[{"text":"容器化部署","id":"容器化部署","depth":2,"charIndex":3},{"text":"镜像构建","id":"镜像构建","depth":3,"charIndex":12},{"text":"服务启动","id":"服务启动","depth":3,"charIndex":74},{"text":"K8S 集群","id":"k8s-集群","depth":2,"charIndex":136},{"text":"镜像构建","id":"镜像构建-1","depth":3,"charIndex":146},{"text":"集群部署","id":"集群部署","depth":3,"charIndex":179}],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"仓库说明","content":"#\n\n\n底层渲染能力#\n\n包名                                           描述          备注\n@lowcode-set-up-platform/nexus-render-core   React 渲染器   --\n\n\n工具集#\n\n包名                                描述        备注\n@lowcode-set-up-platform/shared   搭建侧工具集    --\n@lowcode-set-up-platform/type     类型、协议定义   --\n\n\n搭建时#\n\n包名                                                   描述            备注\n@lowcode-set-up-platform/adapter                     状态适配器         --\n@lowcode-set-up-platform/code-compiler               搭建时的在线代码编译器   --\n@lowcode-set-up-platform/editor                      编辑器SDK        --\n@lowcode-set-up-platform/logicflow-sdk               可视化编排器        --\n@lowcode-set-up-platform/lowcode-canvas-layout       无限画布          --\n@lowcode-set-up-platform/plugin-base-monaco-editor   代码编辑器         --\n@lowcode-set-up-platform/service                     网络请求          --\n@lowcode-set-up-platform/setter                      组件配置设置器       --\n\n\n运行时#\n\n包名                                          描述         备注\n@lowcode-set-up-platform/client-render      页面渲染器      --\n@lowcode-set-up-platform/logicflow-render   流程编排的执行器   --","routePath":"/guide/appendix/repository","lang":"","toc":[{"text":"底层渲染能力","id":"底层渲染能力","depth":2,"charIndex":3},{"text":"工具集","id":"工具集","depth":2,"charIndex":134},{"text":"搭建时","id":"搭建时","depth":2,"charIndex":283},{"text":"运行时","id":"运行时","depth":2,"charIndex":921}],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"平台使用指南","content":"#\n\n本章节将介绍如何访问低代码引擎平台、了解主要模块功能，并快速发布第一个页面。\n\n\n访问入口#\n\n平台部署地址如下：\n\n> 🔗 点击访问 DEMO\n\n> 👤 体验账号：\n> \n> 账号：demo_normal_user\n> \n> 密码：demo_normal_user123 租户：演示租户\n\n\n功能概览#\n\n低代码平台包含了以下核心模块：\n\n\n🎨 组件物料管理#\n\n物料管理是平台构建能力的基础，用于统一维护组件（物料）的元信息、版本信息与依赖内容。\n\n * 支持组件分类管理、版本控制；\n * 可查看组件的当前版本、所属分类、更新时间；\n * 支持跳转查看组件依赖资源与源码配置。\n\n📷 页面示意：\n\n\n\n其中，组件支持折叠展示，点击组件名可查看版本信息：\n\n\n\n\n📄 页面管理#\n\n页面管理用于维护各类页面资源，支持页面的创建、状态切换、发布流程。\n\n * 支持页面名称、路径、状态筛选；\n * 可设置页面为“生产环境”或“测试环境”；\n * 支持页面版本维护与跳转预览。\n\n📷 页面示意：\n\n\n\n\n🧩 页面设计器（搭建画布）#\n\n设计器是平台的核心能力，支持：\n\n * 拖拽组件构建页面结构；\n * 实时属性配置与样式调整；\n * 数据绑定与交互逻辑定义；\n * 页面实时预览、保存与发布；\n\n📷 搭建示意：\n\n\n\n左侧为组件区，支持表单、容器、基础组件等物料拖拽。右侧为属性配置面板，支持样式、布局、数据绑定等能力。\n\n\n🔐 开发者中心#\n\n开发者中心提供 API 网关接入与安全密钥配置能力，用于将平台与后端服务或第三方服务打通。\n\n * 支持生成 AccessKey / SecretKey；\n * 支持对接鉴权服务、安全配置等；\n * 每个应用可设置 Logo、URL、启用状态；\n\n📷 页面示意：\n\n\n\n\n🚀 快速发布你的第一个页面#\n\n只需 3 步，即可完成页面从创建 → 搭建 → 发布的流程：\n\n\n1️⃣ 新建页面#\n\n进入【页面管理】，点击「新建」，填写页面名称与路径。\n\n\n2️⃣ 拖拽搭建页面#\n\n进入设计器，左侧选择组件拖入画布，中间实时预览，右侧配置属性、样式与交互逻辑。\n\n📷 示意图参考搭建画布截图\n\n\n3️⃣ 发布页面#\n\n点击页面右上角「发布」按钮，选择环境（测试/生产），即可生成线上可访问地址。\n\n📍 可参考：页面搭建\n\n\n✅ 小结#\n\n通过平台的可视化设计能力与统一的组件物料体系，用户无需手写代码即可快速构建业务页面，并可灵活发布至不同环境，真正实现「搭建即上线」。","routePath":"/guide/demo","lang":"","toc":[{"text":"访问入口","id":"访问入口","depth":2,"charIndex":43},{"text":"功能概览","id":"功能概览","depth":2,"charIndex":151},{"text":"🎨 组件物料管理","id":"-组件物料管理","depth":3,"charIndex":176},{"text":"📄 页面管理","id":"-页面管理","depth":3,"charIndex":340},{"text":"🧩 页面设计器（搭建画布）","id":"-页面设计器搭建画布","depth":3,"charIndex":460},{"text":"🔐 开发者中心","id":"-开发者中心","depth":3,"charIndex":625},{"text":"🚀 快速发布你的第一个页面","id":"-快速发布你的第一个页面","depth":2,"charIndex":773},{"text":"1️⃣ 新建页面","id":"1️⃣-新建页面","depth":3,"charIndex":823},{"text":"2️⃣ 拖拽搭建页面","id":"2️⃣-拖拽搭建页面","depth":3,"charIndex":863},{"text":"3️⃣ 发布页面","id":"3️⃣-发布页面","depth":3,"charIndex":934},{"text":"✅ 小结","id":"-小结","depth":2,"charIndex":999}],"domain":"","frontmatter":{},"version":""},{"id":21,"title":"CLI自动化","content":"#\n\n\n概述#\n\n待补充","routePath":"/guide/framework/CLI自动化","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":22,"title":"画布设计","content":"#\n\n\n概述#\n\n画布的能力是低代码平台的核心能力之一，也是低代码平台区别于传统开发平台的重要特征之一， 它主要承载着搭建时各种组件的可视化编辑、渲染。\n\n核心的能力包括画布的无限滚动、刻度线标尺、辅助线等能力。\n\n\n设计原理#\n\n\n无限画布#\n\n\n\n\n刻度线、标尺#\n\n待补充","routePath":"/guide/framework/canvas","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3},{"text":"设计原理","id":"设计原理","depth":2,"charIndex":108},{"text":"无限画布","id":"无限画布","depth":3,"charIndex":116},{"text":"刻度线、标尺","id":"刻度线标尺","depth":3,"charIndex":126}],"domain":"","frontmatter":{},"version":""},{"id":23,"title":"编辑器","content":"#\n\n\n概述#\n\n画布的能力是低代码平台的核心能力之一，也是低代码平台区别于传统开发平台的重要特征之一， 它主要承载着搭建时各种组件的可视化编辑、渲染。\n\n核心的能力包括画布的无限滚动、刻度线标尺、辅助线等能力。\n\n\n设计原理#\n\n\n数据流向#\n\n\n\n\n物料管理#\n\n\n物料加载#\n\n\nEditor Sdk#\n\n\nPreview Sdk#","routePath":"/guide/framework/editor","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3},{"text":"设计原理","id":"设计原理","depth":2,"charIndex":108},{"text":"数据流向","id":"数据流向","depth":3,"charIndex":116},{"text":"物料管理","id":"物料管理","depth":3,"charIndex":126},{"text":"物料加载","id":"物料加载","depth":3,"charIndex":134},{"text":"Editor Sdk","id":"editor-sdk","depth":3,"charIndex":142},{"text":"Preview Sdk","id":"preview-sdk","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":24,"title":"物料定义","content":"#\n\n\n概述#\n\n待补充","routePath":"/guide/framework/material","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":25,"title":"页面定义","content":"#\n\n\n概述#\n\n待补充","routePath":"/guide/framework/page","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":26,"title":"页面预览","content":"#\n\n\n概述#\n\n低代码的页面预览能力用于搭建结果的校验，是搭建画布实时预览的补充。\n\n核心的能力主要是模板渲染。\n\n\n设计原理#\n\n\n预览流程#\n\n\n\n\n模板渲染#","routePath":"/guide/framework/preview","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3},{"text":"设计原理","id":"设计原理","depth":2,"charIndex":59},{"text":"预览流程","id":"预览流程","depth":3,"charIndex":67},{"text":"模板渲染","id":"模板渲染","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":27,"title":"页面发布","content":"#\n\n\n概述#\n\n低代码的页面发布能力类似于传统前端开发中的发布，主要是生成符合前端规范的静态资源（js、css、html）\n\n核心的能力包括物料资源的合并、oss 上传等。\n\n\n设计原理#\n\n\n发布流程#\n\n\n\n\n物料合并#\n\n\nOSS#\n\n\n生产运行时#\n\n","routePath":"/guide/framework/publish","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3},{"text":"设计原理","id":"设计原理","depth":2,"charIndex":89},{"text":"发布流程","id":"发布流程","depth":3,"charIndex":97},{"text":"物料合并","id":"物料合并","depth":3,"charIndex":107},{"text":"OSS","id":"oss","depth":3,"charIndex":115},{"text":"生产运行时","id":"生产运行时","depth":3,"charIndex":122}],"domain":"","frontmatter":{},"version":""},{"id":28,"title":"沙箱","content":"#\n\n\n概述#\n\n因编辑器输入代码的不可信任，所以需要一个沙箱环境来执行代码, 防止程序访问 / 影响主页面, 主要用于隔离搭建侧和画布预览侧的作用域。\n\nTIP\n\n在计算机安全中，沙箱（Sandbox）是一种用于隔离正在运行程序的安全机制，通常用于执行未经测试或不受信任的程序或代码，它会为待执行的程序创建一个独立的执行环境\n，内部程序的执行不会影响到外部程序的运行\n\n画布使用了最传统的 Iframe 方案，它的兼容性最好，功能最完善（沙箱做的最彻底，js 作用域、css 隔离等），但此处还是列举了几个社区中其他的沙箱方案。\n\n\n其他方案#\n\n\nProxy Sandbox#\n\n可以通过代理 Proxy 实现对象的劫持，通过 window 对象的修改进行记录，在卸载时删除这些记录，在应用再次激活时恢复这些记录，来达到模拟沙箱环境的目的。\n\n\n\n以上代码实现了基础版的沙箱，通过 active 方法开始沙箱代理，社区中的 qiankunu 等此类的微前端架构中基本都采用了此类的设计。\n\n\nDiff Sandbox#\n\n除 Proxy 方式外，我们可以通过 diff 的方式创建沙箱，一般作为 Proxy Sandbox 的降级方案，在应用运行的时候保存一个快照 window\n对象，将当前 window 对象的全部属性都复制到快照对象上，子应用卸载的时候将 window 对象修改做个 diff，将不同的属性用个 modifyMap\n保存起来，再次挂载的时候再加上这些修改的属性。\n\n\n\n\n画布沙箱#\n\n\n方案设计#\n\n画布沙箱和低代码平台处于同域，因此不会存在跨域无法操作沙箱 dom 的问题，仅仅作为隔离 javascript、style 的容器。\n\n","routePath":"/guide/framework/sandbox","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3},{"text":"其他方案","id":"其他方案","depth":2,"charIndex":267},{"text":"Proxy Sandbox","id":"proxy-sandbox","depth":3,"charIndex":275},{"text":"Diff Sandbox","id":"diff-sandbox","depth":3,"charIndex":447},{"text":"画布沙箱","id":"画布沙箱","depth":2,"charIndex":648},{"text":"方案设计","id":"方案设计","depth":3,"charIndex":656}],"domain":"","frontmatter":{},"version":""},{"id":29,"title":"架构概述","content":"#\n\n\n系统设计概述#\n\n\n\n平台以 Schema 协议为基础（包括物料、页面、应用）协议，在协议的基础之上、基于 React 实现了渲染引擎，旨在通过标准协议还原 UI 视图、交互；\n\n从开发者的角度，平台提供了快捷的的物料、插件的生产方式，以满足对于物料的自定义要求。\n\n\n协议栈概述#\n\n\n物料协议#\n\n物料的协议包含俩部分：物料设置器协议、物料的基本信息协议：\n\n 1. 物料的设置器协议主要用于描述物料的哪些属性、交互、事件是允许物料的消费者配置的，以及该如何配置这些配置项，这部分的定义可以 移步、查看更多\n 2. 物料的基本信息协议主要用于描述物料的基本信息。\n\n这部分的协议主要由物料的生产者提供，以下是一个简单的物料协议示例：\n\n物料的设置器协议示例：\n\n\n\n物料的数据协议示例：\n\n\n\n\n页面协议#\n\n页面的协议主要用于描述页面的结构、样式、生命周期、状态、方法等，以下是一个简单的页面协议示例：\n\n\n\n\n引擎流程概述#\n\n\n\n\n周边生态概述#\n\n平台生态主要分为 3 部分，物料、设置器和插件。\n\n\n物料生态#\n\n物料是低代码平台的生产资料，包括：\n\n 1. 低代码物料生产能力和规范（协议、自定义物料能力）；\n 2. 物料的规范化的开发流程（创建、开发、发布、注册、升级、下线）等；\n 3. AntdDesign 组件的支持（进行中）。\n\n\n设置器生态#\n\n设置器主要负责物料配置项的统筹管理，物料的生产者在开发物料时，如果平台提供的默认的设置器无法满足时，就需要自定义开发物料的设置器，目前平台提供的默认设置器，字符\n、数字、布尔、数组、对象数组等。\n\n每个设置器本质上是一个 React 组件，接受由引擎传入的参数 value 和 onChange，value 是初始传入的值，onChange\n是在设置器的值变化时的回传函数，将值刨除去（类似于Form Item 中的自定义组件）。\n\n\n插件生态#\n\n目前平台提供的插件有：源码编辑面板、大纲树面板、设置器容器面板、顶部通栏面板、Schema 预览面板等，后续会陆续开发其自定义的能力。","routePath":"/guide/framework/summary","lang":"","toc":[{"text":"系统设计概述","id":"系统设计概述","depth":2,"charIndex":3},{"text":"协议栈概述","id":"协议栈概述","depth":2,"charIndex":138},{"text":"物料协议","id":"物料协议","depth":3,"charIndex":147},{"text":"页面协议","id":"页面协议","depth":3,"charIndex":353},{"text":"引擎流程概述","id":"引擎流程概述","depth":2,"charIndex":412},{"text":"周边生态概述","id":"周边生态概述","depth":2,"charIndex":424},{"text":"物料生态","id":"物料生态","depth":3,"charIndex":460},{"text":"设置器生态","id":"设置器生态","depth":3,"charIndex":582},{"text":"插件生态","id":"插件生态","depth":3,"charIndex":808}],"domain":"","frontmatter":{},"version":""},{"id":30,"title":"物料DSL解析","content":"#\n\n\n概述#\n\n当前业内大多数低代码平台的物料配置项通常通过 JSON Schema 来描述。这种方式虽然灵活，但在实际开发中存在一些明显的痛点：\n\n 1. 学习成本高：特别是对于拥有复杂配置项的物料，理解和手写 Schema 需要较高的专业知识，给开发者带来了额外的负担。\n 2. 重复工作量大：对于使用 TypeScript 的开发者来说，手写 JSON Schema\n    的过程尤为繁琐。开发者通常需要为同一个属性定义两套配置：一套是用于代码类型校验的 Interface.ts 文件，另一套是描述 Schema 的\n    JSON 文件，这大幅增加了开发成本。\n\n通过自动化生成配置项，可以有效降低开发难度，提高开发效率，同时减少维护成本。\n\n\n基本流程#\n\n\n\n移步体验\n\n\n设计原理#\n\n开发者可以使用 TypeScript 编写物料的 props 类型文件 (Interface.ts)，然后通过工具将其解析成 AST，再根据 AST\n中的字段和注释自动生成标准的 DSL；\n\n例如以下代码:\n\n\n\n通过解析后生成如下的 DSL:\n\nDETAILS\n\n\n\n最后通过 DSL json 渲染的效果类似：\n\n\n\n\nAST 解析#\n\n常见的方案#\n\n业内解析代码生成Ast 的工具非常多。\n\nBabel#\n\n广泛用于 ES6+ 转换为 ES5，代码转译、优化和静态分析， 适合处理 JavaScript/TypeScript 代码的语法转换与优化。\n\n 1. @babel/parser：解析代码生成 AST；\n 2. @babel/traverse：对 AST 进行遍历，修改节点；\n 3. @babel/types：用于生成或修改 AST 节点；\n 4. @babel/generator：将 AST 转回代码；\n\nAcorn#\n\n轻量级、高性能的 JavaScript 解析器， 需要自定义的语法扩展或极高的性能需求。\n\nSWC#\n\n基于 Rust 的高性能 JavaScript/TypeScript 转译器，支持解析和生成 AST， 性能远超\nBabel，适合需要高性能的大规模代码解析与转换。\n\nTypeScript Compiler API#\n\n能解析 TypeScript 代码为 AST， 适合对 TypeScript 代码的深度解析和类型分析。\n\n最佳选择#\n\n此转换工具只用通过分析 AST 查找字段类型，不用修改源码，比较适合通过 TypeScript Compiler 实现。 TypeScript Compiler\nAPI 官方提供的文档只有一个 wiki，TypeScript Compiler API， 感兴趣的可以研究研究。\n\n 1. createSourceFile\n\n\n\n 2. forEachChild\n\n\n\n 3. SyntaxKind.InterfaceDeclaration\n\n对于 interface 关键字段做分析处理。\n\n 4. SyntaxKind.EnumDeclaration\n\n对于 enum 关键字段做分析处理。\n\n 4. SyntaxKind.TypeAliasDeclaration、SyntaxKind.FunctionType\n\n对于函数类型做分析处理。\n\n\n元数据解析#\n\n元数据解析主要负责解析物料的基本信息，包括物料名称、物料描述、物料版本、物料的每一个配置项等。\n\n 1. 通过 ts 提供的 getJSDocTags Api 获取字段对应的注释；\n 2. 然后逐一解析每一行注释，提取出字段的名称、已经对应的值；\n\n核心实现#\n\n","routePath":"/guide/framework/type-to-ast","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3},{"text":"基本流程","id":"基本流程","depth":2,"charIndex":330},{"text":"设计原理","id":"设计原理","depth":2,"charIndex":346},{"text":"AST 解析","id":"ast-解析","depth":3,"charIndex":515},{"text":"常见的方案","id":"常见的方案","depth":4,"charIndex":524},{"text":"最佳选择","id":"最佳选择","depth":4,"charIndex":991},{"text":"元数据解析","id":"元数据解析","depth":3,"charIndex":1372},{"text":"核心实现","id":"核心实现","depth":4,"charIndex":1505}],"domain":"","frontmatter":{},"version":""},{"id":31,"title":"简介","content":"#\n\n\n什么是低代码？#\n\n低代码（Low-Code）是一种通过“可视化搭建 + 配置驱动 +\n标准组件”实现应用快速交付的开发范式，目标是降低开发门槛、提高交付效率，赋能技术人员与业务人员协同构建系统。\n\n\n核心能力包括：#\n\n 1. 可视化页面搭建\n    \n    通过拖拽、配置的方式完成页面设计，无需掌握前端技术细节；\n 2. 组件物料体系\n    \n    内置丰富的基础组件和业务能力，支持二次封装与扩展；\n 3. 数据模型与配置化能力\n    \n    可视化建模支持业务表结构定义与数据绑定；\n 4. 权限与流程引擎支持\n    \n    提供标准化权限配置、流程定义与操作策略，满足企业场景；\n 5. 统一部署与运行机制\n    \n    支持页面打包发布，运行时动态渲染与加载；\n\n低代码不仅适用于 CRUD 类型的后台系统，也正逐步拓展至门户系统、移动端、小程序、IoT 管理台等复杂业务场景。\n\n\n平台定位：低代码引擎#\n\n本低代码平台定位为一款面向前端工程师与业务交付人员的底层引擎，核心价值包括：\n\n * 提供完整的设计器能力：页面可视化搭建、组件配置、画布交互；\n * 支持灵活的Schema 协议驱动：搭建即生成结构化 Schema，运行时渲染；\n * 提供统一的物料体系与插件机制：组件开发、注册、编排一体化；\n * 支持从设计到部署的一站式流程：搭建 → 发布 → 渲染运行；\n\n\n平台核心理念#\n\n> 用结构化的 Schema 描述 UI + 逻辑，再通过引擎驱动渲染与行为，还原用户设计意图。\n\n\n示例界面#\n\n下图为设计器主界面，支持拖拽搭建、属性配置、数据绑定等功能：\n\n\n\n\n主流低代码方案对比#\n\n平台名称            支持方   技术架构              特点概述\nLowCodeEngine   阿里    基于 Schema 驱动搭建    插件架构、企业可定制、支持物料注册与运行态渲染\ntango           网易    源码 AST 驱动构建       编辑 AST 自动生成源码、无私有协议、适用于开发者主导的场景\ntmagic-editor   腾讯    Schema + 沙箱模式渲染   前后端解耦、强调运行时动态性、支持多种页面结构\n\n\n技术流派总结#\n\n当前业界主流低代码方案大致分为两类：\n\n * Schema 驱动型（如 LowCodeEngine、tmagic-editor）\n   \n   优势在于结构清晰、适合持久化与平台化建设，运行时解析 Schema 渲染页面；\n\n * AST 驱动型（如 tango）\n   \n   更贴近代码开发流程，生成真实代码，更适合有工程化诉求的项目团队；\n\n\n后续内容预览#\n\n接下来的文档将逐步介绍平台的核心模块和使用方法，包括但不限于：\n\n * 设计器与画布搭建流程；\n\n * Schema 协议规范；\n\n * 页面/组件发布流程；\n\n * 物料体系接入与扩展；\n\n * 数据绑定与模型设计；\n\n * 权限管理与运行机制；\n\n\n推荐阅读#\n\n * 快速开始","routePath":"/guide/","lang":"","toc":[{"text":"什么是低代码？","id":"什么是低代码","depth":2,"charIndex":3},{"text":"核心能力包括：","id":"核心能力包括","depth":3,"charIndex":104},{"text":"平台定位：低代码引擎","id":"平台定位低代码引擎","depth":2,"charIndex":411},{"text":"平台核心理念","id":"平台核心理念","depth":3,"charIndex":609},{"text":"示例界面","id":"示例界面","depth":3,"charIndex":669},{"text":"主流低代码方案对比","id":"主流低代码方案对比","depth":2,"charIndex":711},{"text":"技术流派总结","id":"技术流派总结","depth":3,"charIndex":970},{"text":"后续内容预览","id":"后续内容预览","depth":2,"charIndex":1154},{"text":"推荐阅读","id":"推荐阅读","depth":2,"charIndex":1290}],"domain":"","frontmatter":{},"version":""},{"id":32,"title":"","content":"","routePath":"/guide/openapi/component/ApiDoc","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":33,"title":"","content":"","routePath":"/guide/openapi/component/ExampleCode","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":34,"title":"","content":"","routePath":"/guide/openapi/component/ExampleRenderView","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":35,"title":"","content":"","routePath":"/guide/openapi/component/Use","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":36,"title":"开放接口","content":"#\n\n\n概述#\n\n平台提供开发接口供集成方使用\n\n\n用户管理#\n\n\n注册用户#\n\n\n登录用户#\n\n\n获取 token#\n\n\n刷新 token#\n\n\n物料管理#\n\n\n新增物料#\n\n\n物料更新#\n\n\n发布物料#\n\n\n页面管理#\n\n\n新增页面#\n\n\n新增版本#\n\n\n发布页面#\n\n\n下线页面#\n\n\n导出页面产物#\n\n\n文件管理#\n\n\n上传文件#\n\n\n下载文件#\n\n\n字典管理#\n\n\n读取字典#\n\n\n新增字典#","routePath":"/guide/openapi/openapi","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3},{"text":"用户管理","id":"用户管理","depth":2,"charIndex":25},{"text":"注册用户","id":"注册用户","depth":3,"charIndex":33},{"text":"登录用户","id":"登录用户","depth":3,"charIndex":41},{"text":"获取 token","id":"获取-token","depth":3,"charIndex":49},{"text":"刷新 token","id":"刷新-token","depth":3,"charIndex":61},{"text":"物料管理","id":"物料管理","depth":2,"charIndex":73},{"text":"新增物料","id":"新增物料","depth":3,"charIndex":81},{"text":"物料更新","id":"物料更新","depth":3,"charIndex":89},{"text":"发布物料","id":"发布物料","depth":3,"charIndex":97},{"text":"页面管理","id":"页面管理","depth":2,"charIndex":105},{"text":"新增页面","id":"新增页面","depth":3,"charIndex":113},{"text":"新增版本","id":"新增版本","depth":3,"charIndex":121},{"text":"发布页面","id":"发布页面","depth":3,"charIndex":129},{"text":"下线页面","id":"下线页面","depth":3,"charIndex":137},{"text":"导出页面产物","id":"导出页面产物","depth":3,"charIndex":145},{"text":"文件管理","id":"文件管理","depth":2,"charIndex":155},{"text":"上传文件","id":"上传文件","depth":3,"charIndex":163},{"text":"下载文件","id":"下载文件","depth":3,"charIndex":171},{"text":"字典管理","id":"字典管理","depth":2,"charIndex":179},{"text":"读取字典","id":"读取字典","depth":3,"charIndex":187},{"text":"新增字典","id":"新增字典","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":37,"title":"渲染器接入—前端","content":"#\n\n\n概述#\n\n平台提供了 SDK 版的渲染器，用于 SCHEMA 到视图的渲染；\n\n\n使用#\n\n\n安裝#\n\n\n效果#\n\n通过规范的 Schema 渲染组件或者页面:\n\nDETAILS\n\n\n\n\n注意#\n\nTIP\n\n目前仅仅支持 React 技术栈，后续提供 Vue等其他技术栈的 SDK。","routePath":"/guide/openapi/sdk-front","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":3},{"text":"使用","id":"使用","depth":2,"charIndex":44},{"text":"安裝","id":"安裝","depth":3,"charIndex":50},{"text":"效果","id":"效果","depth":3,"charIndex":56},{"text":"注意","id":"注意","depth":2,"charIndex":97}],"domain":"","frontmatter":{},"version":""},{"id":38,"title":"密钥管理","content":"#\n\n\n申请密钥#\n\n进入秘钥管理 点击新增。\n\n\n\n\n注意#\n\nTIP\n\n一个账号最多拥有两对密钥(Access/Secret\nKey)；更换密钥时，请创建第二个密钥；删除密钥前须停用；出于安全考虑，建议您周期性地更换密钥也不可泄露他人或者公开。","routePath":"/guide/operation/access","lang":"","toc":[{"text":"申请密钥","id":"申请密钥","depth":2,"charIndex":3},{"text":"注意","id":"注意","depth":2,"charIndex":27}],"domain":"","frontmatter":{},"version":""},{"id":39,"title":"组织及用户","content":"#\n\n\n注册#\n\n进入登录页面。\n\n\n\n\n注意#\n\nTIP\n\n个人账号注意保密，切记不可泄露他人。","routePath":"/guide/operation/org-user","lang":"","toc":[{"text":"注册","id":"注册","depth":2,"charIndex":3},{"text":"注意","id":"注意","depth":2,"charIndex":20}],"domain":"","frontmatter":{},"version":""},{"id":40,"title":"组织结构管理","content":"#\n\n组织结构用于构建租户内部的人员/部门体系，是用户分组、权限控制的重要基础设施。\n\n\n一、组织结构介绍#\n\n每个租户空间都拥有独立的组织结构树，支持多级组织（如公司 → 部门 → 小组）形式。\n\n平台默认提供一个“默认组织”，管理员可按需新增子级组织，实现树形管理。\n\n📌 示例结构：\n\n\n\n--------------------------------------------------------------------------------\n\n\n二、进入组织管理界面#\n\n导航位置：\n\n> 平台管理 → 组织架构\n\n界面结构包括：\n\n * 组织树结构\n * 成员列表\n * 成员搜索与添加\n\n📷 示例页面：\n\n\n\n\n三、创建组织节点#\n\n 1. 点击「新建」按钮；\n 2. 输入组织编码、名称、描述；\n 3. 可选设置上级组织，实现嵌套关系；\n\n📷 创建弹窗：\n\n\n\n\n四、组织成员管理#\n\n\n添加成员#\n\n 1. 点击对应组织右上角「新增成员」；\n 2. 填写用户账号信息（用户名、初始密码、所属组织）；\n 3. 点击「确定」完成成员创建；\n\n📷 添加成员界面：\n\n\n\n\n五、子组织成员查看#\n\n支持勾选「子部门成员」切换视图，查看当前组织及下属组织下的所有成员。\n\n\n六、组织结构使用建议#\n\n * 推荐使用扁平 + 2 级结构，便于管理；\n * 使用组织作为“数据隔离”和“角色分配”的分组基础；\n * 可将用户与多个角色关联，但只能属于一个组织节点；\n\n> 📚 推荐阅读：\n> \n>  * 用户管理指南\n>  * 租户与登录\n>  * 角色与权限配置","routePath":"/guide/operation/org","lang":"","toc":[{"text":"一、组织结构介绍","id":"一组织结构介绍","depth":2,"charIndex":44},{"text":"二、进入组织管理界面","id":"二进入组织管理界面","depth":2,"charIndex":231},{"text":"三、创建组织节点","id":"三创建组织节点","depth":2,"charIndex":317},{"text":"四、组织成员管理","id":"四组织成员管理","depth":2,"charIndex":395},{"text":"添加成员","id":"添加成员","depth":3,"charIndex":407},{"text":"五、子组织成员查看","id":"五子组织成员查看","depth":2,"charIndex":498},{"text":"六、组织结构使用建议","id":"六组织结构使用建议","depth":2,"charIndex":547}],"domain":"","frontmatter":{},"version":""},{"id":41,"title":"角色与权限配置","content":"#\n\n本节介绍平台中角色的定义、类型与权限分配方式，包括菜单与 API 权限两类。\n\n\n一、角色体系简介#\n\n角色用于统一管理用户权限，通过“角色绑定资源 → 用户绑定角色”的方式完成授权。\n\n * 每个租户独立维护自己的角色；\n\n * 一个用户可拥有多个角色；\n\n * 角色控制访问范围、操作权限；\n\n\n二、内置角色说明#\n\n系统默认初始化以下角色：\n\n角色编码                   名称       说明\ntenant_admin_role      管理员角色    拥有全平台访问权限\ndefault_user           默认用户角色   初始绑定基础权限\nservice_account_role   服务账号角色   接口调用型角色\n\n📷 角色列表示意：\n\n\n\n\n三、创建与管理角色#\n\n路径：平台管理 → 角色管理 → 新建角色\n\n * 输入角色编码、名称、描述；\n\n * 创建完成后即可分配权限；\n\n\n四、权限分配方式#\n\n\n1️⃣ 菜单权限#\n\n控制用户是否可访问某个页面或模块（如“页面管理”、“物料管理”）。\n\n支持操作类型：\n\n * 只读；\n * 写入；\n * 执行（如触发接口）；\n\n📷 分配菜单权限示意：\n\n\n\n\n2️⃣ API 权限#\n\n用于控制后端 API 访问权限（如用户新增、权限分配、物料查询等）。\n\n📷 API 授权界面：\n\n\n\n\n五、用户绑定角色#\n\n可在【组织架构 → 用户 → 分配角色】中设置角色绑定，支持多角色绑定。\n\n> 📌 权限为所有角色权限的合并结果。\n\n\n六、权限控制建议#\n\n * 创建功能角色（如：内容编辑、管理员）而非按人设角色；\n\n * 避免单用户直接配置资源权限，应通过角色赋权；\n\n * 默认角色建议配置只读能力，重要功能通过显式授权开放；\n\n> 📚 推荐阅读：\n> \n>  * 用户管理与登录\n>  * 组织结构管理\n>  * 租户创建与初始化","routePath":"/guide/operation/role","lang":"","toc":[{"text":"一、角色体系简介","id":"一角色体系简介","depth":2,"charIndex":43},{"text":"二、内置角色说明","id":"二内置角色说明","depth":2,"charIndex":152},{"text":"三、创建与管理角色","id":"三创建与管理角色","depth":2,"charIndex":351},{"text":"四、权限分配方式","id":"四权限分配方式","depth":2,"charIndex":422},{"text":"1️⃣ 菜单权限","id":"1️⃣-菜单权限","depth":3,"charIndex":434},{"text":"2️⃣ API 权限","id":"2️⃣-api-权限","depth":3,"charIndex":535},{"text":"五、用户绑定角色","id":"五用户绑定角色","depth":2,"charIndex":601},{"text":"六、权限控制建议","id":"六权限控制建议","depth":2,"charIndex":673}],"domain":"","frontmatter":{},"version":""},{"id":42,"title":"租户管理与登录","content":"#\n\n低代码平台支持多租户能力，平台运营方可通过创建不同租户来服务多个业务域或子公司，实现资源隔离与权限独立。\n\n\n一、平台租户模型说明#\n\n低代码引擎采用租户 → 组织 → 用户的典型三层结构：\n\n\n\n * 租户：独立业务空间，资源隔离；\n\n * 组织：租户内部的部门结构；\n\n * 用户：挂载组织的账号，绑定角色登录平台；\n\n\n二、租户创建方式#\n\n平台支持两种部署方式：\n\n * 🏢 公有部署：不支持自助创建，需平台管理员审核创建；\n * 🏠 私有部署：支持通过「租户管理」后台创建租户信息；\n\n📷 创建租户：\n\n\n\n创建后平台将自动初始化：\n\n * 默认管理员账号（[租户编码]@admin）；\n * 系统内置角色；\n * 默认组织节点；\n\n📷 租户管理页面：\n\n\n\n\n三、租户下的管理能力（建议阅读）#\n\n * 📂 组织结构管理：构建部门、管理组织成员；\n\n * 👤 用户管理与登录：添加用户、绑定组织、平台登录方式；\n\n * 🔐 角色与权限配置：分配菜单权限 / API 权限；\n\n\n四、登录说明#\n\n平台登录采用「租户 + 用户账号 + 密码」三元认证机制：\n\n📷 登录页面：\n\n\n\n> ⚠️ 无用户自注册能力，所有账号需通过租户管理员添加。\n\n\n五、常见问题#\n\n\nQ：一个用户可以属于多个租户吗？#\n\nA：不支持，账号在租户内唯一。\n\n\nQ：租户是否可以删除？#\n\nA：支持，但需先清除其下属数据。\n\n\nQ：如何重置密码？#\n\nA：联系管理员在后台重置，平台不提供找回入口。\n\n\n📚 推荐阅读#\n\n * 组织结构管理\n * 用户管理指南\n * 角色与权限配置","routePath":"/guide/operation/tenant","lang":"","toc":[{"text":"一、平台租户模型说明","id":"一平台租户模型说明","depth":2,"charIndex":57},{"text":"二、租户创建方式","id":"二租户创建方式","depth":2,"charIndex":165},{"text":"三、租户下的管理能力（建议阅读）","id":"三租户下的管理能力建议阅读","depth":2,"charIndex":342},{"text":"四、登录说明","id":"四登录说明","depth":2,"charIndex":454},{"text":"五、常见问题","id":"五常见问题","depth":2,"charIndex":538},{"text":"Q：一个用户可以属于多个租户吗？","id":"q一个用户可以属于多个租户吗","depth":3,"charIndex":548},{"text":"Q：租户是否可以删除？","id":"q租户是否可以删除","depth":3,"charIndex":585},{"text":"Q：如何重置密码？","id":"q如何重置密码","depth":3,"charIndex":618},{"text":"📚 推荐阅读","id":"-推荐阅读","depth":2,"charIndex":656}],"domain":"","frontmatter":{},"version":""},{"id":43,"title":"用户管理与登录","content":"#\n\n本章节介绍如何在租户内创建用户成员，以及用户登录平台的完整流程。\n\n\n一、用户基本模型#\n\n * 每个用户属于一个租户；\n\n * 每个用户必须挂载在一个组织节点下；\n\n * 用户账号具有唯一性；\n\n * 用户登录需输入【租户 + 账号 + 密码】；\n\n\n二、用户创建流程#\n\n路径：平台管理 → 组织架构 → 新建成员\n\n 1. 填写成员账号、默认密码、所属组织；\n 2. 成员创建成功后，可登录使用；\n 3. 初始状态为“启用”；\n\n📷 新建用户弹窗：\n\n\n\n> ⚠️ 注意：平台不支持用户自注册，必须由管理员添加。\n\n\n三、用户信息维护#\n\n在用户列表中点击「编辑」可维护用户昵称、邮箱、状态等信息。\n\n支持操作：\n\n * 启用 / 停用 用户；\n * 分配角色（见角色权限文档）；\n\n📷 成员管理列表：\n\n\n\n\n四、用户登录说明#\n\n平台采用租户 + 账号的登录方式：\n\n 1. 登录页选择所属租户；\n 2. 输入用户账号与密码；\n 3. 点击登录按钮，进入平台主页；\n\n📷 登录界面：\n\n\n\n> ✅ 成功登录后权限由绑定的角色控制，未授权页面将不可访问。\n\n\n五、常见问题#\n\n\nQ：一个用户能加入多个组织吗？#\n\nA：不支持，每个用户仅绑定一个组织。\n\n\nQ：用户忘记密码怎么办？#\n\nA：由租户管理员重置。\n\n> 📚 推荐阅读：\n> \n>  * 组织结构管理\n>  * 角色与权限配置\n>  * 租户与登录说明","routePath":"/guide/operation/user","lang":"","toc":[{"text":"一、用户基本模型","id":"一用户基本模型","depth":2,"charIndex":37},{"text":"二、用户创建流程","id":"二用户创建流程","depth":2,"charIndex":129},{"text":"三、用户信息维护","id":"三用户信息维护","depth":2,"charIndex":265},{"text":"四、用户登录说明","id":"四用户登录说明","depth":2,"charIndex":363},{"text":"五、常见问题","id":"五常见问题","depth":2,"charIndex":489},{"text":"Q：一个用户能加入多个组织吗？","id":"q一个用户能加入多个组织吗","depth":3,"charIndex":499},{"text":"Q：用户忘记密码怎么办？","id":"q用户忘记密码怎么办","depth":3,"charIndex":538}],"domain":"","frontmatter":{},"version":""},{"id":44,"title":"页面搭建","content":"#\n\n\n页面创建#\n\n 1. 登入平台进入 物料管理\\页面管理\n\n 2. 点击新增页面，填入基本信息，点击确认，返回页面列表\n    \n    \n\n 3. 找到刚新建的页面，点击版本 进入该页面的版本列表\n    \n    \n\n 4. 点击装修，即可进入搭建页面\n\n\n页面搭建#\n\n 1. 选择左侧物料\n    \n    \n\n 2. 选中画布组件，配置右侧组件对应的属性\n    \n    \n\n\n预览页面#\n\n 1. 点击右上角预览，会先自动触发页面保存，紧接着会自动打开新 tab, 即可看到搭建的效果\n\n\n发布页面#\n\n 1. 点击右上角发布按钮，会先自动触发页面保存，紧接着会触发服务端打包进行产物的构建\n    \n    \n\n 2. 返回页面列表，即可看到页面状态已变更为已发布，点击页面路径即可访问刚刚搭建的页面\n    \n    \n\n\n产物下载#\n\n 1. 页面对应的版本列表，点击发布记录，即可进行产物下载，然后在我的下载中可以找到对应的下载任务","routePath":"/guide/page/build-page","lang":"","toc":[{"text":"页面创建","id":"页面创建","depth":2,"charIndex":3},{"text":"页面搭建","id":"页面搭建-1","depth":2,"charIndex":-1},{"text":"预览页面","id":"预览页面","depth":2,"charIndex":197},{"text":"发布页面","id":"发布页面","depth":2,"charIndex":254},{"text":"产物下载","id":"产物下载","depth":2,"charIndex":373}],"domain":"","frontmatter":{},"version":""},{"id":45,"title":"页面搭建能力概览","content":"#\n\n低代码平台提供所见即所得的可视化页面搭建能力，业务人员或开发者无需编写前端代码，即可通过拖拽组件、配置属性、绑定数据等方式快速构建业务页面。\n\n本节将介绍页面搭建的基本概念、核心结构与操作入口。\n\n\n一、页面搭建核心理念#\n\n页面构建采用 Schema 驱动 + 组件化设计 的组合模式：\n\n * Schema（页面结构描述）：每个页面对应一份 JSON 描述文件，记录组件树结构、属性配置、绑定数据等信息；\n * 物料组件（Material）：平台预设常用基础组件（如表单、表格、按钮等），也支持扩展业务组件；\n * 画布（Canvas）：拖拽组件并实时预览搭建效果的区域，支持自由布局与嵌套容器；\n * 右侧配置面板：用于配置选中组件的属性、事件、数据源等；\n\n📷 页面搭建器示意图：\n\n\n\n\n二、页面构成结构#\n\n一个页面由多个部分组成，逻辑结构如下：\n\n\n\n> 📌 页面搭建的每一次拖拽、配置修改，底层都是对 Schema 的增删改。\n\n\n三、搭建流程简介#\n\n 1. 选择页面：进入某一页面的设计视图；\n\n 2. 拖入组件：从左侧组件区选择一个组件，拖拽至画布；\n\n 3. 配置属性：点击组件，右侧配置面板显示可调属性；\n\n 4. 绑定数据：若组件支持数据源（如表格、列表），可在数据面板绑定远程或本地数据；\n\n 5. 设置交互：在事件面板中配置组件行为（如点击跳转、调用接口等）；\n\n 6. 预览与发布：点击右上角预览查看效果，确认后可进行页面发布；\n\n\n四、常见页面类型#\n\n平台支持以下常见页面类型：\n\n页面类型   说明\n表单页    用于创建/编辑业务数据，常包含输入项和提交按钮\n列表页    展示业务数据列表，支持分页、搜索、操作按钮等\n报表页    图表组件组合而成的可视化数据展示页面\n嵌套页面   页面中可嵌套其他页面模块或动态区域\n\n页面类型不是固定模板，而是通过组件组合灵活实现。\n\n\n五、搭建器功能入口说明#\n\n区域       功能描述\n页面导航区    显示当前编辑页面，支持跳转与切换\n组件区      展示所有可用物料组件，按分类展示\n画布       拖拽组件的可视区域，实时渲染编辑效果\n属性配置面板   展示当前选中组件的配置项、事件、数据等\n快捷操作栏    预览、发布、撤销/重做、Schema 导出等操作\n\n\n六、进阶推荐#\n\n搭建页面仅是起点，平台还支持以下能力：\n\n * 🌐 数据源绑定：页面可绑定 AJAX 请求、模拟数据、动态映射等；\n * 🔗 页面跳转与联动：组件间通过事件实现页面间跳转、参数传递；\n * 🎯 权限控制：页面组件可配置角色权限控制显隐；\n * 🧱 自定义组件：支持导入业务组件，扩展平台能力；\n\n> 📚 推荐继续阅读：\n> \n>  * 页面管理与新建流程","routePath":"/guide/page/overview","lang":"","toc":[{"text":"一、页面搭建核心理念","id":"一页面搭建核心理念","depth":2,"charIndex":102},{"text":"二、页面构成结构","id":"二页面构成结构","depth":2,"charIndex":352},{"text":"三、搭建流程简介","id":"三搭建流程简介","depth":2,"charIndex":428},{"text":"四、常见页面类型","id":"四常见页面类型","depth":2,"charIndex":638},{"text":"五、搭建器功能入口说明","id":"五搭建器功能入口说明","depth":2,"charIndex":814},{"text":"六、进阶推荐","id":"六进阶推荐","depth":2,"charIndex":987}],"domain":"","frontmatter":{},"version":""},{"id":46,"title":"页面管理与新建流程","content":"#\n\n页面是低代码平台的核心构建单元，所有搭建工作均围绕页面展开。平台支持多页面管理、版本控制与一键发布能力，满足从开发到上线的完整流程。\n\n\n一、页面管理概览#\n\n页面管理模块提供以下功能：\n\n * 页面分组与列表查看；\n * 新建页面（支持复制已有页面）；\n * 页面信息编辑（名称、路径等）；\n * 页面版本查看与回滚；\n * 页面预览与发布；\n\n📷 页面管理界面示意：\n\n\n\n\n二、新建页面流程#\n\n路径：平台管理 → 页面管理 → 新建页面\n\n 1. 点击右上角「新建页面」；\n 2. 填写页面基础信息：\n    * 页面名称（展示用）；\n    * 页面编码（系统唯一标识）；\n    * 页面路径（最终访问地址）；\n    * 所属分组 / 分类；\n 3. 确认创建后进入可视化搭建界面。\n\n📷 新建页面弹窗：\n\n\n\n\n三、页面信息编辑#\n\n在页面列表中可点击某一页面的「编辑」按钮，进入详情配置：\n\n * 支持修改名称、路径、说明、favicon；\n * 支持设置页面品牌、地区、SEO meta 等扩展字段；\n * 所有信息修改均立即生效（不影响搭建内容）；\n\n📷 页面信息编辑：\n\n\n\n\n四、页面版本控制#\n\n平台对每次页面保存操作都会生成一个版本记录，便于回溯与对比。\n\n\n✅ 版本能力包括：#\n\n * 历史版本列表查看（含提交人、时间）；\n * 版本内容预览（JSON Diff）；\n * 一键回滚至历史任意版本；\n * 支持版本备注填写（如“上线初版”）；\n\n📷 页面版本管理：\n\n\n\n\n五、页面预览与调试#\n\n在页面搭建器中点击右上角「预览」按钮：\n\n * 自动生成临时预览地址；\n * 支持带参数预览；\n * 使用真实数据源、真实组件运行；\n * 可联调事件逻辑与接口请求；\n\n> 🔎 注意：预览不代表正式上线，仅供测试使用。\n\n📷 页面预览效果：\n\n\n\n\n六、页面发布机制#\n\n页面搭建完成并测试通过后，点击「发布」按钮可将当前页面内容正式上线。\n\n\n✅ 发布流程包含：#\n\n 1. 自动保存并生成新版本；\n 2. 合成页面依赖组件与资源（版本锁定）；\n 3. 写入最新版本记录；\n 4. 上传 HTML 至 OSS/CDN（私有部署场景）；\n 5. 更新线上访问地址（含路径与版本）；\n\n> 📌 每次发布都带有版本号标识，历史页面不会被覆盖。\n\n📷 页面发布操作：\n\n\n\n\n七、页面分类与搜索#\n\n支持按页面类型、创建人、更新时间进行筛选与搜索，便于管理大量页面资源。\n\n\n八、页面删除与恢复#\n\n * 支持逻辑删除（软删），避免误删；\n\n * 删除后页面不可编辑与访问；\n\n * 平台管理员可进入「回收站」进行恢复或永久清除；\n\n\n九、页面命名建议#\n\n类型     命名建议\n页面编码   英文+横杠组合，如：user-list\n页面名称   中文名，如：用户列表\n路由路径   /admin/user/list 等语义清晰路径\n\n> ⚠️ 页面编码需唯一，避免与已有页面/组件冲突。\n\n\n十、推荐继续阅读#\n\n * 页面搭建能力概览\n * 自定义物料","routePath":"/guide/page/page","lang":"","toc":[{"text":"一、页面管理概览","id":"一页面管理概览","depth":2,"charIndex":71},{"text":"二、新建页面流程","id":"二新建页面流程","depth":2,"charIndex":193},{"text":"三、页面信息编辑","id":"三页面信息编辑","depth":2,"charIndex":368},{"text":"四、页面版本控制","id":"四页面版本控制","depth":2,"charIndex":506},{"text":"✅ 版本能力包括：","id":"-版本能力包括","depth":3,"charIndex":550},{"text":"五、页面预览与调试","id":"五页面预览与调试","depth":2,"charIndex":660},{"text":"六、页面发布机制","id":"六页面发布机制","depth":2,"charIndex":799},{"text":"✅ 发布流程包含：","id":"-发布流程包含","depth":3,"charIndex":847},{"text":"七、页面分类与搜索","id":"七页面分类与搜索","depth":2,"charIndex":1011},{"text":"八、页面删除与恢复","id":"八页面删除与恢复","depth":2,"charIndex":1061},{"text":"九、页面命名建议","id":"九页面命名建议","depth":2,"charIndex":1141},{"text":"十、推荐继续阅读","id":"十推荐继续阅读","depth":2,"charIndex":1271}],"domain":"","frontmatter":{},"version":""},{"id":47,"title":"Schema定义","content":"#\n\nSchema 用于描述物料的属性，平台支持用 TypeScript 的 interface 直接定义，更加符合开发者的编码习惯。物料在编译阶段会自动将\ninterface 文件通过 Ast 转成成Schema，其中成员属性会解析成配置属性，成员属性的注释会解析成对应的 Props。以下列举了一些常见的示例。\n\n\n常见配置#\n\n\nStringSetter#\n\n效果#\n\n示例配置#\n\n\nImageSetter#\n\n效果#\n\n示例配置#\n\n\nNumberSetter#\n\n效果#\n\n示例配置#\n\n\nEventSetter#\n\n效果#\n\n示例配置#\n\n\nColorSetter#\n\n效果#\n\n示例配置#\n\n\nDateSetter#\n\n效果#\n\n示例配置#\n\n\nTimeSetter#\n\n效果#\n\n示例配置#\n\n\nDateTimeSetter#\n\n效果#\n\n示例配置#\n\n\nSingleSelectSetter#\n\n效果#\n\n示例配置#\n\n\nMultipleSelectSetter#\n\n效果#\n\n示例配置#\n\n\nBooleanSetter#\n\n效果#\n\n示例配置#\n\n\nCheckBoxSetter#\n\n效果#\n\n示例配置#\n\n\nObjectSetter#\n\n效果#\n\n示例配置#\n\n\nArrayObjectSetter#\n\n效果#\n\n示例配置#\n\n\n配置选项#\n\n\n常用注解选项#\n\ntype#\n\n * 描述：表单字段的类型\n * 类型：string | number | boolean | array | range | html | block\n\ntitle#\n\n * 描述：表单字段的标签\n * 类型：string\n\nplaceholder#\n\n * 描述：输入内容提示\n * 类型：string | [string, string]\n\ndescription#\n\n * 描述：副标题描述\n * 类型：string\n\nmin#\n\n * 描述：NumberSetter 类型时为最小值；\n * 类型：number\n\nmax#\n\n * 描述：NumberSetter 类型时为最大值；\n * 类型：number\n\nmin#\n\n * 描述：NumberSetter 类型时为最小值；\n * 类型：number\n\nmaxItems#\n\n * 描述：ArrayObjectSetter、ArraySetter 类型时最大的长度；\n * 类型：number\n\nminItems#\n\n * 描述：ArrayObjectSetter、ArraySetter 类型时最小的长度；\n * 类型：number\n\nformat#\n\n * 描述：在已设置的 type 下，如何处理这个 type\n * 类型：'image' | 'text' | 'dateTime' | 'date' | 'time' | 'file' | 'color'\n\nTIP\n\n会根据 type 和 format 自动选择适合的 widget。但更推荐显式的指定 widget，而不是自动选择。\n\n\n其他注解选项#\n\ntooltip#\n\n * 描述：气泡提示\n * 类型：string\n\ndescWidget#\n\n * 描述：自定义副标题提示组件\n * 类型：string\n\nrequired#\n\n * 描述：是否必填\n * 类型：boolean\n\nprops#\n\n * 描述：其他属性，object 属性转换成 string\n\n * 类型：string","routePath":"/guide/use/Schema定义","lang":"","toc":[{"text":"常见配置","id":"常见配置","depth":2,"charIndex":159},{"text":"StringSetter","id":"stringsetter","depth":3,"charIndex":167},{"text":"效果","id":"效果","depth":4,"charIndex":182},{"text":"示例配置","id":"示例配置","depth":4,"charIndex":187},{"text":"ImageSetter","id":"imagesetter","depth":3,"charIndex":195},{"text":"效果","id":"效果-1","depth":4,"charIndex":209},{"text":"示例配置","id":"示例配置-1","depth":4,"charIndex":214},{"text":"NumberSetter","id":"numbersetter","depth":3,"charIndex":222},{"text":"效果","id":"效果-2","depth":4,"charIndex":237},{"text":"示例配置","id":"示例配置-2","depth":4,"charIndex":242},{"text":"EventSetter","id":"eventsetter","depth":3,"charIndex":250},{"text":"效果","id":"效果-3","depth":4,"charIndex":264},{"text":"示例配置","id":"示例配置-3","depth":4,"charIndex":269},{"text":"ColorSetter","id":"colorsetter","depth":3,"charIndex":277},{"text":"效果","id":"效果-4","depth":4,"charIndex":291},{"text":"示例配置","id":"示例配置-4","depth":4,"charIndex":296},{"text":"DateSetter","id":"datesetter","depth":3,"charIndex":304},{"text":"效果","id":"效果-5","depth":4,"charIndex":317},{"text":"示例配置","id":"示例配置-5","depth":4,"charIndex":322},{"text":"TimeSetter","id":"timesetter","depth":3,"charIndex":330},{"text":"效果","id":"效果-6","depth":4,"charIndex":343},{"text":"示例配置","id":"示例配置-6","depth":4,"charIndex":348},{"text":"DateTimeSetter","id":"datetimesetter","depth":3,"charIndex":356},{"text":"效果","id":"效果-7","depth":4,"charIndex":373},{"text":"示例配置","id":"示例配置-7","depth":4,"charIndex":378},{"text":"SingleSelectSetter","id":"singleselectsetter","depth":3,"charIndex":386},{"text":"效果","id":"效果-8","depth":4,"charIndex":407},{"text":"示例配置","id":"示例配置-8","depth":4,"charIndex":412},{"text":"MultipleSelectSetter","id":"multipleselectsetter","depth":3,"charIndex":420},{"text":"效果","id":"效果-9","depth":4,"charIndex":443},{"text":"示例配置","id":"示例配置-9","depth":4,"charIndex":448},{"text":"BooleanSetter","id":"booleansetter","depth":3,"charIndex":456},{"text":"效果","id":"效果-10","depth":4,"charIndex":472},{"text":"示例配置","id":"示例配置-10","depth":4,"charIndex":477},{"text":"CheckBoxSetter","id":"checkboxsetter","depth":3,"charIndex":485},{"text":"效果","id":"效果-11","depth":4,"charIndex":502},{"text":"示例配置","id":"示例配置-11","depth":4,"charIndex":507},{"text":"ObjectSetter","id":"objectsetter","depth":3,"charIndex":515},{"text":"效果","id":"效果-12","depth":4,"charIndex":530},{"text":"示例配置","id":"示例配置-12","depth":4,"charIndex":535},{"text":"ArrayObjectSetter","id":"arrayobjectsetter","depth":3,"charIndex":543},{"text":"效果","id":"效果-13","depth":4,"charIndex":563},{"text":"示例配置","id":"示例配置-13","depth":4,"charIndex":568},{"text":"配置选项","id":"配置选项","depth":2,"charIndex":576},{"text":"常用注解选项","id":"常用注解选项","depth":3,"charIndex":584},{"text":"type","id":"type","depth":4,"charIndex":593},{"text":"title","id":"title","depth":4,"charIndex":678},{"text":"placeholder","id":"placeholder","depth":4,"charIndex":714},{"text":"description","id":"description","depth":4,"charIndex":774},{"text":"min","id":"min","depth":4,"charIndex":814},{"text":"max","id":"max","depth":4,"charIndex":862},{"text":"min","id":"min-1","depth":4,"charIndex":910},{"text":"maxItems","id":"maxitems","depth":4,"charIndex":958},{"text":"minItems","id":"minitems","depth":4,"charIndex":1029},{"text":"format","id":"format","depth":4,"charIndex":1100},{"text":"其他注解选项","id":"其他注解选项","depth":3,"charIndex":1280},{"text":"tooltip","id":"tooltip","depth":4,"charIndex":1289},{"text":"descWidget","id":"descwidget","depth":4,"charIndex":1324},{"text":"required","id":"required","depth":4,"charIndex":1368},{"text":"props","id":"props","depth":4,"charIndex":1405}],"domain":"","frontmatter":{},"version":""},{"id":48,"title":"","content":"","routePath":"/guide/use/code/Code","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":49,"title":"自定义物料","content":"#\n\n平台支持开发者使用 @wu-component/wu-cli 脚手架创建、开发和发布自己的物料组件。物料支持低代码平台接入，包括属性 Schema\n自动生成、版本管理、资源配置等能力。\n\n\n创建第一个物料#\n\n 1. 安装脚手架 @wu-component/wu-cli 是于搭建平台配套使用的教授架，用于物料的创建、开发、发布（该脚手架不仅可以开发物料，也可以开发\n    WebComponent 以及传统的 Web 项目）。\n    \n    \n\n 2. 创建项目\n    \n    \n    \n    application-app-name 为要创建的物料名称。\n    \n    生成的目录结构如下：\n    \n    \n\n 3. 开发服务器 启动开发服务器就可以愉快的开发了， 命令如下（dev 脚本会执行 wu dev，底层依赖 vite 的 dev-server）：\n    \n    \n\n\n物料发布#\n\n\n物料构建#\n\n执行构建命令 build， 命令如下（build 脚本会执行 wu build，底层依赖 vite 的构建）：\n\n\n\n构建的产物如下(和wu-config.ts 中的 format 关联)：\n\n\n\n\n物料发布#\n\n执行发布命令前，需要校验以下内容：\n\n 1. 确保 package.json 中的 version 和已有版本不会冲突；\n 2. 确保 wu.config.ts 中 user.clientId 必须是正式存在的开发者应用。\n\n一切准备就绪后执行 发布命令：\n\n\n\nTIP\n\n首次执行 wu upload 时会执行登录授权的逻辑，控制台会提示自动打开浏览器进行登录授权（如无法自动打开浏览器，则可以手动复制 url 打开）。\n\n\n升级线上版本#\n\n组件提示发布成功后，进入，可以通过 版本日志查看组件详情，也可以酌情升级/发布组件。\n\n\n\n\n\n\n文件说明#\n\n\nwu.config.ts#\n\n配置示例#\n\nwu.config.ts 基本配置如下：\n\n\n\n配置项#\n\n名称     类型     必填   默认值   说明\nmeta   Meta   是    --    物料的元数据配置\n\nMeta#\n\n名称     类型                 必填   默认值        说明\ntype   ProjectType        是    material   项目的类型，此时默认为 material，此值还可以是 web、web-component\nlib    ProjectLibConfig   是    --         物料构建、开发时的配置，创建项目时自动生成，可以自己修改\nuser   CliUser            否    --         发布物料时的用户信息配置，1：需要在平台注册成为用户，2：首次发布物料需要登录授权\n\nProjectLibConfig#\n\n名称         类型                  必填   默认值                                        说明\nlibName    String              是    自动生成                                       物料 umd 构建产物的变量名称，同 vite\\webpack 的 library.name 配置\nname       String              是    自动生成                                       物料名称，平台内必须保持唯一性\nformats    String[]            是    ['umd', 'es', 'cjs', 'iife']               物料构建产物的类型，类似 vite\\webpack 的format 配置\nfileName   (format) =>String   是    format => ${format}.js                     物料构建产物的fileName，类似 vite\\webpack fileName 配置\nexternal   Object              否    {react: 'React','react-dom': 'ReactDOM'}   物料构建 external，类似 vite\\webpack external 配置\n\nCliUser#\n\n名称         类型       必填   默认值   说明\nhost       String   是    -     平台域名，私有化部署时填写私有化部署的域名\nclientId   String   是    -     注册的开发者 clientId\n\n\nIProps.d.ts#\n\n该文件是物料的类型定义文件,物料的 Schema 通过该文件中定义的 TypeScript 类型结合注释来生成，该文件会自动创建，开发者可根据需求自定义组件\nSchema。\n\n> 📚 推荐继续阅读：\n> \n>  * 物料类型定义\n>  * TS类型转Schema设计原理","routePath":"/guide/use/material","lang":"","toc":[{"text":"创建第一个物料","id":"创建第一个物料","depth":2,"charIndex":97},{"text":"物料发布","id":"物料发布","depth":2,"charIndex":407},{"text":"物料构建","id":"物料构建","depth":3,"charIndex":415},{"text":"物料发布","id":"物料发布-1","depth":3,"charIndex":522},{"text":"升级线上版本","id":"升级线上版本","depth":3,"charIndex":743},{"text":"文件说明","id":"文件说明","depth":2,"charIndex":801},{"text":"wu.config.ts","id":"wuconfigts","depth":3,"charIndex":809},{"text":"配置示例","id":"配置示例","depth":4,"charIndex":824},{"text":"配置项","id":"配置项","depth":4,"charIndex":855},{"text":"IProps.d.ts","id":"ipropsdts","depth":3,"charIndex":2052}],"domain":"","frontmatter":{},"version":""},{"id":50,"title":"","content":"","routePath":"/guide/use/schemaComponent/Boolean","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":51,"title":"","content":"","routePath":"/guide/use/schemaComponent/ColorPicker","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":52,"title":"","content":"","routePath":"/guide/use/schemaComponent/DatePicker","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":53,"title":"","content":"","routePath":"/guide/use/schemaComponent/Event","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":54,"title":"","content":"","routePath":"/guide/use/schemaComponent/FormSchemaRender","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":55,"title":"","content":"","routePath":"/guide/use/schemaComponent/Image","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":56,"title":"","content":"","routePath":"/guide/use/schemaComponent/Input","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":57,"title":"","content":"","routePath":"/guide/use/schemaComponent/InputNumber","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":58,"title":"","content":"","routePath":"/guide/use/schemaComponent/Object","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":59,"title":"","content":"","routePath":"/guide/use/schemaComponent/ObjectArray","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":60,"title":"","content":"","routePath":"/guide/use/schemaComponent/Select","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":61,"title":"Hello World!","content":"#\n\n\nStart#\n\nWrite something to build your own docs! 🎁","routePath":"/hello","lang":"","toc":[{"text":"Start","id":"start","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":63,"title":"","content":"","routePath":"/schema/","lang":"","toc":[],"domain":"","frontmatter":{"navbar":true,"sidebar":false,"outline":false,"footer":false},"version":""},{"id":64,"title":"","content":"","routePath":"/schema/playground/","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":65,"title":"","content":"","routePath":"/utils/LoadService","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":66,"title":"","content":"","routePath":"/utils/loader","lang":"","toc":[],"domain":"","frontmatter":{},"version":""}]